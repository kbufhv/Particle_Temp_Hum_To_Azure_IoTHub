
/Users/kathrinburtscher/Particle/Particle_Temp_Hum_To_Azure_IoTHub/target/1.5.2/argon/Particle_Temp_Hum_To_Azure_IoTHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003044  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d7060  000d7060  00007060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d7068  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  2003e328  000d706c  0001e328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000460  2003e390  2003e390  0002e390  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d70d4  000d70d4  000270d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d70fc  000d70fc  000270fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000e9806  00000000  00000000  00027100  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000125d8  00000000  00000000  00110906  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001fe43  00000000  00000000  00122ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000027e8  00000000  00000000  00142d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004ab8  00000000  00000000  00145509  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00037ab5  00000000  00000000  00149fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002c751  00000000  00000000  00181a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010918a  00000000  00000000  001ae1c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d6f0  00000000  00000000  002b7354  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fdf1 	bl	d6c14 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fdf6 	bl	d6c2a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e328 	.word	0x2003e328
   d4048:	000d706c 	.word	0x000d706c
   d404c:	2003e390 	.word	0x2003e390
   d4050:	2003e390 	.word	0x2003e390
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fd8b 	bl	d5b74 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7060 	.word	0x000d7060
   d4080:	000d7024 	.word	0x000d7024

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b816 	b.w	d40b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f821 	bl	d40d0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bd31 	b.w	d5af8 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bbd9 	b.w	d484c <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bbdf 	b.w	d485c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bbdd 	b.w	d485c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:
DHT sensor(D2);
String temp;
String hum;

// setup() runs once, when the device is first turned on.
void setup(){
   d40b4:	b508      	push	{r3, lr}

  //Temperature and Humidity Sensor
  Serial.begin(9600);
   d40b6:	f001 fc63 	bl	d5980 <_Z16_fetch_usbserialv>
   d40ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40be:	f001 fc53 	bl	d5968 <_ZN9USBSerial5beginEl>
  sensor.begin();
   d40c2:	4802      	ldr	r0, [pc, #8]	; (d40cc <setup+0x18>)
}
   d40c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// setup() runs once, when the device is first turned on.
void setup(){

  //Temperature and Humidity Sensor
  Serial.begin(9600);
  sensor.begin();
   d40c8:	f000 b8de 	b.w	d4288 <_ZN3DHT5beginEv>
   d40cc:	2003e394 	.word	0x2003e394

000d40d0 <loop>:
}
// loop() runs over and over again (delay duration can be manipulated in the Particle App)
void loop()
{
   d40d0:	b510      	push	{r4, lr}

  //get sensor data
  temp = String(sensor.getTempCelcius());
   d40d2:	482d      	ldr	r0, [pc, #180]	; (d4188 <loop+0xb8>)
  Serial.begin(9600);
  sensor.begin();
}
// loop() runs over and over again (delay duration can be manipulated in the Particle App)
void loop()
{
   d40d4:	b08a      	sub	sp, #40	; 0x28

  //get sensor data
  temp = String(sensor.getTempCelcius());
   d40d6:	f000 f9c1 	bl	d445c <_ZN3DHT14getTempCelciusEv>
   d40da:	2106      	movs	r1, #6
   d40dc:	a806      	add	r0, sp, #24
   d40de:	f001 fae9 	bl	d56b4 <_ZN6StringC1Efi>
   d40e2:	a906      	add	r1, sp, #24
   d40e4:	4829      	ldr	r0, [pc, #164]	; (d418c <loop+0xbc>)
   d40e6:	f001 facc 	bl	d5682 <_ZN6StringaSEOS_>
   d40ea:	a806      	add	r0, sp, #24
   d40ec:	f001 fa38 	bl	d5560 <_ZN6StringD1Ev>
  hum = String(sensor.getHumidity());
   d40f0:	4825      	ldr	r0, [pc, #148]	; (d4188 <loop+0xb8>)
   d40f2:	f000 f9c5 	bl	d4480 <_ZN3DHT11getHumidityEv>
   d40f6:	2106      	movs	r1, #6
   d40f8:	a806      	add	r0, sp, #24
   d40fa:	f001 fadb 	bl	d56b4 <_ZN6StringC1Efi>
   d40fe:	a906      	add	r1, sp, #24
   d4100:	4823      	ldr	r0, [pc, #140]	; (d4190 <loop+0xc0>)
   d4102:	f001 fabe 	bl	d5682 <_ZN6StringaSEOS_>
   d4106:	a806      	add	r0, sp, #24
   d4108:	f001 fa2a 	bl	d5560 <_ZN6StringD1Ev>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d410c:	4921      	ldr	r1, [pc, #132]	; (d4194 <loop+0xc4>)
   d410e:	a806      	add	r0, sp, #24
   d4110:	f001 fa6d 	bl	d55ee <_ZN6StringC1EPK19__FlashStringHelper>

  //AZURE build data string and publish data
  String res = "{\"temperature\":" + temp + ", \"humidity\":" + hum + "}";
   d4114:	491d      	ldr	r1, [pc, #116]	; (d418c <loop+0xbc>)
   d4116:	a806      	add	r0, sp, #24
   d4118:	f001 fafd 	bl	d5716 <_ZplRK15StringSumHelperRK6String>
   d411c:	491e      	ldr	r1, [pc, #120]	; (d4198 <loop+0xc8>)
   d411e:	f001 fb06 	bl	d572e <_ZplRK15StringSumHelperPKc>
   d4122:	491b      	ldr	r1, [pc, #108]	; (d4190 <loop+0xc0>)
   d4124:	f001 faf7 	bl	d5716 <_ZplRK15StringSumHelperRK6String>
   d4128:	491c      	ldr	r1, [pc, #112]	; (d419c <loop+0xcc>)
   d412a:	f001 fb00 	bl	d572e <_ZplRK15StringSumHelperPKc>
   d412e:	4601      	mov	r1, r0
   d4130:	a802      	add	r0, sp, #8
   d4132:	f001 fa9b 	bl	d566c <_ZN6StringC1ERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4136:	a806      	add	r0, sp, #24
   d4138:	f001 fa12 	bl	d5560 <_ZN6StringD1Ev>
   d413c:	4b18      	ldr	r3, [pc, #96]	; (d41a0 <loop+0xd0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d413e:	9a02      	ldr	r2, [sp, #8]
   d4140:	781b      	ldrb	r3, [r3, #0]
   d4142:	f88d 3000 	strb.w	r3, [sp]
   d4146:	4917      	ldr	r1, [pc, #92]	; (d41a4 <loop+0xd4>)
   d4148:	233c      	movs	r3, #60	; 0x3c
   d414a:	a806      	add	r0, sp, #24
   d414c:	f000 fd56 	bl	d4bfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4150:	9c07      	ldr	r4, [sp, #28]
   d4152:	b17c      	cbz	r4, d4174 <loop+0xa4>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4154:	6863      	ldr	r3, [r4, #4]
   d4156:	3b01      	subs	r3, #1
   d4158:	6063      	str	r3, [r4, #4]
   d415a:	b95b      	cbnz	r3, d4174 <loop+0xa4>
        {
          _M_dispose();
   d415c:	6823      	ldr	r3, [r4, #0]
   d415e:	4620      	mov	r0, r4
   d4160:	689b      	ldr	r3, [r3, #8]
   d4162:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4164:	68a3      	ldr	r3, [r4, #8]
   d4166:	3b01      	subs	r3, #1
   d4168:	60a3      	str	r3, [r4, #8]
   d416a:	b91b      	cbnz	r3, d4174 <loop+0xa4>
            _M_destroy();
   d416c:	6823      	ldr	r3, [r4, #0]
   d416e:	4620      	mov	r0, r4
   d4170:	68db      	ldr	r3, [r3, #12]
   d4172:	4798      	blx	r3
  Particle.publish("temperature", res, PRIVATE);

  //wait for 30 seconds
  delay(30 * 1000);
   d4174:	f247 5030 	movw	r0, #30000	; 0x7530
   d4178:	f000 fb90 	bl	d489c <delay>
  //get sensor data
  temp = String(sensor.getTempCelcius());
  hum = String(sensor.getHumidity());

  //AZURE build data string and publish data
  String res = "{\"temperature\":" + temp + ", \"humidity\":" + hum + "}";
   d417c:	a802      	add	r0, sp, #8
   d417e:	f001 f9ef 	bl	d5560 <_ZN6StringD1Ev>
  Particle.publish("temperature", res, PRIVATE);

  //wait for 30 seconds
  delay(30 * 1000);
}
   d4182:	b00a      	add	sp, #40	; 0x28
   d4184:	bd10      	pop	{r4, pc}
   d4186:	bf00      	nop
   d4188:	2003e394 	.word	0x2003e394
   d418c:	2003e3ac 	.word	0x2003e3ac
   d4190:	2003e3bc 	.word	0x2003e3bc
   d4194:	000d6cf8 	.word	0x000d6cf8
   d4198:	000d6d08 	.word	0x000d6d08
   d419c:	000d6d16 	.word	0x000d6d16
   d41a0:	2003e3a8 	.word	0x2003e3a8
   d41a4:	000d6d18 	.word	0x000d6d18

000d41a8 <_GLOBAL__sub_I_sensor>:
   d41a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d41aa:	4b11      	ldr	r3, [pc, #68]	; (d41f0 <_GLOBAL__sub_I_sensor+0x48>)

#include "Grove_Temperature_And_Humidity_Sensor.h"

//Temperature and Humidity Sensor
DHT sensor(D2);
String temp;
   d41ac:	4f11      	ldr	r7, [pc, #68]	; (d41f4 <_GLOBAL__sub_I_sensor+0x4c>)
   d41ae:	4c12      	ldr	r4, [pc, #72]	; (d41f8 <_GLOBAL__sub_I_sensor+0x50>)
   d41b0:	4e12      	ldr	r6, [pc, #72]	; (d41fc <_GLOBAL__sub_I_sensor+0x54>)
   d41b2:	4d13      	ldr	r5, [pc, #76]	; (d4200 <_GLOBAL__sub_I_sensor+0x58>)
   d41b4:	2201      	movs	r2, #1
   d41b6:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41b8:	f000 f9ac 	bl	d4514 <HAL_Pin_Map>
 */

#include "Grove_Temperature_And_Humidity_Sensor.h"

//Temperature and Humidity Sensor
DHT sensor(D2);
   d41bc:	2206      	movs	r2, #6
   d41be:	2102      	movs	r1, #2
   d41c0:	4810      	ldr	r0, [pc, #64]	; (d4204 <_GLOBAL__sub_I_sensor+0x5c>)
   d41c2:	f000 f85b 	bl	d427c <_ZN3DHTC1Ehh>
String temp;
   d41c6:	4639      	mov	r1, r7
   d41c8:	4620      	mov	r0, r4
   d41ca:	f001 fa10 	bl	d55ee <_ZN6StringC1EPK19__FlashStringHelper>
   d41ce:	4620      	mov	r0, r4
String hum;
   d41d0:	4c0d      	ldr	r4, [pc, #52]	; (d4208 <_GLOBAL__sub_I_sensor+0x60>)

#include "Grove_Temperature_And_Humidity_Sensor.h"

//Temperature and Humidity Sensor
DHT sensor(D2);
String temp;
   d41d2:	4632      	mov	r2, r6
   d41d4:	4629      	mov	r1, r5
   d41d6:	f001 fd81 	bl	d5cdc <__aeabi_atexit>
String hum;
   d41da:	4639      	mov	r1, r7
   d41dc:	4620      	mov	r0, r4
   d41de:	f001 fa06 	bl	d55ee <_ZN6StringC1EPK19__FlashStringHelper>
   d41e2:	4632      	mov	r2, r6
   d41e4:	4629      	mov	r1, r5
   d41e6:	4620      	mov	r0, r4
  String res = "{\"temperature\":" + temp + ", \"humidity\":" + hum + "}";
  Particle.publish("temperature", res, PRIVATE);

  //wait for 30 seconds
  delay(30 * 1000);
}
   d41e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#include "Grove_Temperature_And_Humidity_Sensor.h"

//Temperature and Humidity Sensor
DHT sensor(D2);
String temp;
String hum;
   d41ec:	f001 bd76 	b.w	d5cdc <__aeabi_atexit>
   d41f0:	2003e3a8 	.word	0x2003e3a8
   d41f4:	000d6e57 	.word	0x000d6e57
   d41f8:	2003e3ac 	.word	0x2003e3ac
   d41fc:	2003e390 	.word	0x2003e390
   d4200:	000d5561 	.word	0x000d5561
   d4204:	2003e394 	.word	0x2003e394
   d4208:	2003e3bc 	.word	0x2003e3bc

000d420c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d420c:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d420e:	6803      	ldr	r3, [r0, #0]
   d4210:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4212:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4214:	d904      	bls.n	d4220 <nrf_gpio_pin_port_decode+0x14>
   d4216:	4a07      	ldr	r2, [pc, #28]	; (d4234 <nrf_gpio_pin_port_decode+0x28>)
   d4218:	2100      	movs	r1, #0
   d421a:	200a      	movs	r0, #10
   d421c:	f000 fa72 	bl	d4704 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4220:	6823      	ldr	r3, [r4, #0]
   d4222:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4224:	bf83      	ittte	hi
   d4226:	f003 031f 	andhi.w	r3, r3, #31
   d422a:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d422c:	4802      	ldrhi	r0, [pc, #8]	; (d4238 <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d422e:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d4232:	bd10      	pop	{r4, pc}
   d4234:	000d44f5 	.word	0x000d44f5
   d4238:	50000300 	.word	0x50000300

000d423c <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d423c:	b507      	push	{r0, r1, r2, lr}
   d423e:	ab02      	add	r3, sp, #8
   d4240:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4244:	4618      	mov	r0, r3
   d4246:	f7ff ffe1 	bl	d420c <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d424a:	9a01      	ldr	r2, [sp, #4]
   d424c:	2301      	movs	r3, #1
   d424e:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4250:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}
   d4254:	b003      	add	sp, #12
   d4256:	f85d fb04 	ldr.w	pc, [sp], #4

000d425a <nrf_gpio_pin_read>:
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   d425a:	b507      	push	{r0, r1, r2, lr}
   d425c:	ab02      	add	r3, sp, #8
   d425e:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4262:	4618      	mov	r0, r3
   d4264:	f7ff ffd2 	bl	d420c <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4268:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510

__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d426c:	9801      	ldr	r0, [sp, #4]
   d426e:	fa23 f000 	lsr.w	r0, r3, r0
}
   d4272:	f000 0001 	and.w	r0, r0, #1
   d4276:	b003      	add	sp, #12
   d4278:	f85d fb04 	ldr.w	pc, [sp], #4

000d427c <_ZN3DHTC1Ehh>:
#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
	_count = count;
   d427c:	7202      	strb	r2, [r0, #8]
	firstreading = true;
   d427e:	2201      	movs	r2, #1

#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
   d4280:	7181      	strb	r1, [r0, #6]
	_count = count;
	firstreading = true;
   d4282:	7402      	strb	r2, [r0, #16]
}
   d4284:	4770      	bx	lr
	...

000d4288 <_ZN3DHT5beginEv>:

void DHT::begin(void)
{
   d4288:	b510      	push	{r4, lr}
// set up the pins!
	pinMode(_pin, INPUT);
   d428a:	2100      	movs	r1, #0
	_count = count;
	firstreading = true;
}

void DHT::begin(void)
{
   d428c:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   d428e:	7980      	ldrb	r0, [r0, #6]
   d4290:	f001 fcd2 	bl	d5c38 <pinMode>

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4294:	4a07      	ldr	r2, [pc, #28]	; (d42b4 <_ZN3DHT5beginEv+0x2c>)
   d4296:	79a3      	ldrb	r3, [r4, #6]
   d4298:	6812      	ldr	r2, [r2, #0]
   d429a:	011b      	lsls	r3, r3, #4
   d429c:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d429e:	5cd0      	ldrb	r0, [r2, r3]
   d42a0:	784b      	ldrb	r3, [r1, #1]
   d42a2:	f003 031f 	and.w	r3, r3, #31
   d42a6:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d42aa:	f7ff ffc7 	bl	d423c <nrf_gpio_pin_set>
	pinSetFast(_pin);
	_lastreadtime = 0;
   d42ae:	2300      	movs	r3, #0
   d42b0:	60e3      	str	r3, [r4, #12]
   d42b2:	bd10      	pop	{r4, pc}
   d42b4:	2003e3cc 	.word	0x2003e3cc

000d42b8 <_ZN3DHT4readEv>:
	return NAN;
}


boolean DHT::read(void)
{
   d42b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d42bc:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42be:	f000 f921 	bl	d4504 <HAL_Timer_Get_Milli_Seconds>
	u32 currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime)
   d42c2:	68e3      	ldr	r3, [r4, #12]
   d42c4:	4283      	cmp	r3, r0
	{
// ie there was a rollover
		_lastreadtime = 0;
   d42c6:	bf84      	itt	hi
   d42c8:	2300      	movhi	r3, #0
   d42ca:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d42cc:	7c23      	ldrb	r3, [r4, #16]
   d42ce:	b933      	cbnz	r3, d42de <_ZN3DHT4readEv+0x26>
   d42d0:	68e3      	ldr	r3, [r4, #12]
   d42d2:	1ac0      	subs	r0, r0, r3
   d42d4:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d42d8:	d201      	bcs.n	d42de <_ZN3DHT4readEv+0x26>
		return true; // return last correct measurement
   d42da:	2001      	movs	r0, #1
   d42dc:	e0a8      	b.n	d4430 <_ZN3DHT4readEv+0x178>
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d42de:	2500      	movs	r5, #0

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d42e0:	4e55      	ldr	r6, [pc, #340]	; (d4438 <_ZN3DHT4readEv+0x180>)
   d42e2:	7425      	strb	r5, [r4, #16]
   d42e4:	f000 f90e 	bl	d4504 <HAL_Timer_Get_Milli_Seconds>
   d42e8:	79a3      	ldrb	r3, [r4, #6]
   d42ea:	6832      	ldr	r2, [r6, #0]
/*
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();
   d42ec:	60e0      	str	r0, [r4, #12]
   d42ee:	011b      	lsls	r3, r3, #4
   d42f0:	18d1      	adds	r1, r2, r3

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d42f2:	7125      	strb	r5, [r4, #4]
   d42f4:	70e5      	strb	r5, [r4, #3]
   d42f6:	70a5      	strb	r5, [r4, #2]
   d42f8:	7065      	strb	r5, [r4, #1]
   d42fa:	7025      	strb	r5, [r4, #0]
    nrf_gpio_pin_set(nrf_pin);
   d42fc:	5cd0      	ldrb	r0, [r2, r3]
   d42fe:	784b      	ldrb	r3, [r1, #1]
   d4300:	f003 031f 	and.w	r3, r3, #31
   d4304:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4308:	f7ff ff98 	bl	d423c <nrf_gpio_pin_set>

// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
	delay(250);
   d430c:	20fa      	movs	r0, #250	; 0xfa
   d430e:	f000 fac5 	bl	d489c <delay>

// send begin signal
	pinMode(_pin, OUTPUT);
   d4312:	2101      	movs	r1, #1
   d4314:	79a0      	ldrb	r0, [r4, #6]
   d4316:	f001 fc8f 	bl	d5c38 <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d431a:	79a3      	ldrb	r3, [r4, #6]
   d431c:	6832      	ldr	r2, [r6, #0]
   d431e:	011b      	lsls	r3, r3, #4
   d4320:	18d1      	adds	r1, r2, r3
   d4322:	5cd2      	ldrb	r2, [r2, r3]
   d4324:	784b      	ldrb	r3, [r1, #1]
   d4326:	a802      	add	r0, sp, #8
   d4328:	f003 031f 	and.w	r3, r3, #31
   d432c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4330:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4334:	f7ff ff6a 	bl	d420c <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4338:	9b01      	ldr	r3, [sp, #4]
   d433a:	f04f 0801 	mov.w	r8, #1
   d433e:	fa08 f303 	lsl.w	r3, r8, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4342:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	pinResetFast(_pin);
	delay(20);
   d4346:	2014      	movs	r0, #20
   d4348:	f000 faa8 	bl	d489c <delay>
	noInterrupts();
   d434c:	f000 fe58 	bl	d5000 <_Z12noInterruptsv>

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4350:	79a3      	ldrb	r3, [r4, #6]
   d4352:	6832      	ldr	r2, [r6, #0]
   d4354:	011b      	lsls	r3, r3, #4
   d4356:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d4358:	5cd0      	ldrb	r0, [r2, r3]
   d435a:	784b      	ldrb	r3, [r1, #1]
   d435c:	f003 031f 	and.w	r3, r3, #31
   d4360:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4364:	f7ff ff6a 	bl	d423c <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4368:	2028      	movs	r0, #40	; 0x28
   d436a:	f000 f8c3 	bl	d44f4 <HAL_Delay_Microseconds>
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d436e:	4629      	mov	r1, r5
   d4370:	79a0      	ldrb	r0, [r4, #6]
   d4372:	f001 fc61 	bl	d5c38 <pinMode>

boolean DHT::read(void)
{
	u8 laststate = HIGH;
	u8 counter = 0;
	u8 j = 0, i;
   d4376:	462f      	mov	r7, r5
}


boolean DHT::read(void)
{
	u8 laststate = HIGH;
   d4378:	f04f 0b00 	mov.w	fp, #0
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d437c:	79a3      	ldrb	r3, [r4, #6]
   d437e:	6832      	ldr	r2, [r6, #0]
   d4380:	011b      	lsls	r3, r3, #4
   d4382:	18d1      	adds	r1, r2, r3
   d4384:	f812 a003 	ldrb.w	sl, [r2, r3]
   d4388:	784b      	ldrb	r3, [r1, #1]
   d438a:	f003 031f 	and.w	r3, r3, #31
   d438e:	ea43 1a4a 	orr.w	sl, r3, sl, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4392:	4650      	mov	r0, sl
   d4394:	f7ff ff61 	bl	d425a <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4398:	4650      	mov	r0, sl
   d439a:	f7ff ff5e 	bl	d425a <nrf_gpio_pin_read>
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (pinReadFast(_pin) == laststate) {
   d439e:	4580      	cmp	r8, r0
   d43a0:	fa5f f98b 	uxtb.w	r9, fp
   d43a4:	d108      	bne.n	d43b8 <_ZN3DHT4readEv+0x100>
   d43a6:	2001      	movs	r0, #1
   d43a8:	f10b 0b01 	add.w	fp, fp, #1
   d43ac:	f000 f8a2 	bl	d44f4 <HAL_Delay_Microseconds>
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   d43b0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   d43b4:	d1e2      	bne.n	d437c <_ZN3DHT4readEv+0xc4>
   d43b6:	46d9      	mov	r9, fp
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d43b8:	79a3      	ldrb	r3, [r4, #6]
   d43ba:	6832      	ldr	r2, [r6, #0]
   d43bc:	011b      	lsls	r3, r3, #4
   d43be:	18d1      	adds	r1, r2, r3
   d43c0:	f812 8003 	ldrb.w	r8, [r2, r3]
   d43c4:	784b      	ldrb	r3, [r1, #1]
   d43c6:	f003 031f 	and.w	r3, r3, #31
   d43ca:	ea43 1848 	orr.w	r8, r3, r8, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d43ce:	4640      	mov	r0, r8
   d43d0:	f7ff ff43 	bl	d425a <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d43d4:	4640      	mov	r0, r8
   d43d6:	f7ff ff40 	bl	d425a <nrf_gpio_pin_read>
				break;
			}
		}
		laststate = pinReadFast(_pin);

		if (counter == 255) break;
   d43da:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
			delayMicroseconds(1);
			if (counter == 255) {
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d43de:	fa5f f880 	uxtb.w	r8, r0

		if (counter == 255) break;
   d43e2:	d014      	beq.n	d440e <_ZN3DHT4readEv+0x156>

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
   d43e4:	2d03      	cmp	r5, #3
   d43e6:	d90e      	bls.n	d4406 <_ZN3DHT4readEv+0x14e>
   d43e8:	07eb      	lsls	r3, r5, #31
   d43ea:	d40c      	bmi.n	d4406 <_ZN3DHT4readEv+0x14e>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d43ec:	08fa      	lsrs	r2, r7, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d43ee:	3701      	adds	r7, #1
		if (counter == 255) break;

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d43f0:	5ca3      	ldrb	r3, [r4, r2]
   d43f2:	005b      	lsls	r3, r3, #1
   d43f4:	b2db      	uxtb	r3, r3
   d43f6:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d43f8:	7a21      	ldrb	r1, [r4, #8]
   d43fa:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d43fc:	bf3c      	itt	cc
   d43fe:	f043 0301 	orrcc.w	r3, r3, #1
   d4402:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4404:	b2ff      	uxtb	r7, r7
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
   d4406:	3501      	adds	r5, #1
   d4408:	b2ed      	uxtb	r5, r5
   d440a:	2d55      	cmp	r5, #85	; 0x55
   d440c:	d1b4      	bne.n	d4378 <_ZN3DHT4readEv+0xc0>
			j++;
		}

	}

	interrupts();
   d440e:	f000 fdf9 	bl	d5004 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// Verify that the data is correct
	if ((j >= 40) &&
   d4412:	2f27      	cmp	r7, #39	; 0x27
   d4414:	d90b      	bls.n	d442e <_ZN3DHT4readEv+0x176>
   d4416:	7822      	ldrb	r2, [r4, #0]
   d4418:	7863      	ldrb	r3, [r4, #1]
   d441a:	7921      	ldrb	r1, [r4, #4]
   d441c:	4413      	add	r3, r2
   d441e:	78a2      	ldrb	r2, [r4, #2]
   d4420:	4413      	add	r3, r2
   d4422:	78e2      	ldrb	r2, [r4, #3]
   d4424:	4413      	add	r3, r2
   d4426:	b2db      	uxtb	r3, r3
   d4428:	4299      	cmp	r1, r3
   d442a:	f43f af56 	beq.w	d42da <_ZN3DHT4readEv+0x22>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
		return true;
	}

	return false;
   d442e:	2000      	movs	r0, #0

}
   d4430:	b003      	add	sp, #12
   d4432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4436:	bf00      	nop
   d4438:	2003e3cc 	.word	0x2003e3cc

000d443c <_ZN3DHT15readTemperatureEv>:
	pinSetFast(_pin);
	_lastreadtime = 0;
}

float DHT::readTemperature()
{
   d443c:	b510      	push	{r4, lr}
   d443e:	4604      	mov	r4, r0
	float f;

	if (read())
   d4440:	f7ff ff3a 	bl	d42b8 <_ZN3DHT4readEv>
   d4444:	b128      	cbz	r0, d4452 <_ZN3DHT15readTemperatureEv+0x16>
	{
		f = data[2];
   d4446:	78a3      	ldrb	r3, [r4, #2]
   d4448:	ee00 3a10 	vmov	s0, r3
   d444c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d4450:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d4452:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4458 <_ZN3DHT15readTemperatureEv+0x1c>
}
   d4456:	bd10      	pop	{r4, pc}
   d4458:	7fc00000 	.word	0x7fc00000

000d445c <_ZN3DHT14getTempCelciusEv>:
	return readHumidity();
}

float DHT::getTempCelcius()
{
	return readTemperature();
   d445c:	f7ff bfee 	b.w	d443c <_ZN3DHT15readTemperatureEv>

000d4460 <_ZN3DHT12readHumidityEv>:
{
	return c * 9 / 5 + 32;
}

float DHT::readHumidity(void)
{
   d4460:	b510      	push	{r4, lr}
   d4462:	4604      	mov	r4, r0
	float f;

	if (read())
   d4464:	f7ff ff28 	bl	d42b8 <_ZN3DHT4readEv>
   d4468:	b128      	cbz	r0, d4476 <_ZN3DHT12readHumidityEv+0x16>
	{
		f = data[0];
   d446a:	7823      	ldrb	r3, [r4, #0]
   d446c:	ee00 3a10 	vmov	s0, r3
   d4470:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d4474:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d4476:	ed9f 0a01 	vldr	s0, [pc, #4]	; d447c <_ZN3DHT12readHumidityEv+0x1c>
}
   d447a:	bd10      	pop	{r4, pc}
   d447c:	7fc00000 	.word	0x7fc00000

000d4480 <_ZN3DHT11getHumidityEv>:
	return NAN;
}

float DHT::getHumidity()
{
	return readHumidity();
   d4480:	f7ff bfee 	b.w	d4460 <_ZN3DHT12readHumidityEv>

000d4484 <_GLOBAL__sub_I__ZN3DHTC2Ehh>:
		return true;
	}

	return false;

}
   d4484:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4486:	f000 f845 	bl	d4514 <HAL_Pin_Map>
   d448a:	4b01      	ldr	r3, [pc, #4]	; (d4490 <_GLOBAL__sub_I__ZN3DHTC2Ehh+0xc>)
   d448c:	6018      	str	r0, [r3, #0]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	2003e3cc 	.word	0x2003e3cc

000d4494 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <os_thread_is_current+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	689b      	ldr	r3, [r3, #8]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030248 	.word	0x00030248

000d44a4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <os_thread_join+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	691b      	ldr	r3, [r3, #16]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030248 	.word	0x00030248

000d44b4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <os_thread_cleanup+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	695b      	ldr	r3, [r3, #20]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030248 	.word	0x00030248

000d44c4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <os_mutex_recursive_create+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030248 	.word	0x00030248

000d44d4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <os_mutex_recursive_destroy+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030248 	.word	0x00030248

000d44e4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <HAL_RNG_GetRandomNumber+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	685b      	ldr	r3, [r3, #4]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030218 	.word	0x00030218

000d44f4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <HAL_Delay_Microseconds+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	68db      	ldr	r3, [r3, #12]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030218 	.word	0x00030218

000d4504 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	695b      	ldr	r3, [r3, #20]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030218 	.word	0x00030218

000d4514 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <HAL_Pin_Map+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	681b      	ldr	r3, [r3, #0]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	0003022c 	.word	0x0003022c

000d4524 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <HAL_Pin_Mode+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	689b      	ldr	r3, [r3, #8]
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	0003022c 	.word	0x0003022c

000d4534 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <HAL_Interrupts_Enable_All+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	6a1b      	ldr	r3, [r3, #32]
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	0003022c 	.word	0x0003022c

000d4544 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <HAL_Interrupts_Disable_All+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	0003022c 	.word	0x0003022c

000d4554 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <HAL_I2C_Write_Data+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	6a1b      	ldr	r3, [r3, #32]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	00030228 	.word	0x00030228

000d4564 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <HAL_I2C_Available_Data+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	00030228 	.word	0x00030228

000d4574 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <HAL_I2C_Read_Data+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	00030228 	.word	0x00030228

000d4584 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <HAL_I2C_Peek_Data+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	00030228 	.word	0x00030228

000d4594 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <HAL_I2C_Flush_Data+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	00030228 	.word	0x00030228

000d45a4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <HAL_I2C_Is_Enabled+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	00030228 	.word	0x00030228

000d45b4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <HAL_I2C_Init+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	00030228 	.word	0x00030228

000d45c4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <inet_inet_ntop+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	695b      	ldr	r3, [r3, #20]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	00030264 	.word	0x00030264

000d45d4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <netdb_freeaddrinfo+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	689b      	ldr	r3, [r3, #8]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	00030268 	.word	0x00030268

000d45e4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <netdb_getaddrinfo+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	68db      	ldr	r3, [r3, #12]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030268 	.word	0x00030268

000d45f4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <HAL_SPI_Init+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	69db      	ldr	r3, [r3, #28]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030230 	.word	0x00030230

000d4604 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <HAL_SPI_Is_Enabled+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	6a1b      	ldr	r3, [r3, #32]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030230 	.word	0x00030230

000d4614 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <HAL_USART_Init+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	681b      	ldr	r3, [r3, #0]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	0003023c 	.word	0x0003023c

000d4624 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <HAL_USART_Write_Data+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	68db      	ldr	r3, [r3, #12]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	0003023c 	.word	0x0003023c

000d4634 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <HAL_USART_Available_Data+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	691b      	ldr	r3, [r3, #16]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	0003023c 	.word	0x0003023c

000d4644 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <HAL_USART_Read_Data+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	695b      	ldr	r3, [r3, #20]
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	0003023c 	.word	0x0003023c

000d4654 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <HAL_USART_Peek_Data+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	699b      	ldr	r3, [r3, #24]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	0003023c 	.word	0x0003023c

000d4664 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <HAL_USART_Flush_Data+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	69db      	ldr	r3, [r3, #28]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	0003023c 	.word	0x0003023c

000d4674 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <HAL_USART_Is_Enabled+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	6a1b      	ldr	r3, [r3, #32]
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	0003023c 	.word	0x0003023c

000d4684 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <HAL_USART_Available_Data_For_Write+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	0003023c 	.word	0x0003023c

000d4694 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <HAL_USB_USART_Init+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	681b      	ldr	r3, [r3, #0]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	0003024c 	.word	0x0003024c

000d46a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <HAL_USB_USART_Begin+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	685b      	ldr	r3, [r3, #4]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	0003024c 	.word	0x0003024c

000d46b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <HAL_USB_USART_Available_Data+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	691b      	ldr	r3, [r3, #16]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	0003024c 	.word	0x0003024c

000d46c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	695b      	ldr	r3, [r3, #20]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	0003024c 	.word	0x0003024c

000d46d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <HAL_USB_USART_Receive_Data+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	699b      	ldr	r3, [r3, #24]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	0003024c 	.word	0x0003024c

000d46e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <HAL_USB_USART_Send_Data+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	69db      	ldr	r3, [r3, #28]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003024c 	.word	0x0003024c

000d46f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <HAL_USB_USART_Flush_Data+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	6a1b      	ldr	r3, [r3, #32]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003024c 	.word	0x0003024c

000d4704 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <panic_+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	00030260 	.word	0x00030260

000d4714 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <set_system_mode+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	685b      	ldr	r3, [r3, #4]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	00030220 	.word	0x00030220

000d4724 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <system_delay_ms+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	695b      	ldr	r3, [r3, #20]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	00030220 	.word	0x00030220

000d4734 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <application_thread_current+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	00030220 	.word	0x00030220

000d4744 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <application_thread_invoke+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	00030220 	.word	0x00030220

000d4754 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b03      	ldr	r3, [pc, #12]	; (d4764 <system_ctrl_set_app_request_handler+0x10>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d475e:	9301      	str	r3, [sp, #4]
   d4760:	bd08      	pop	{r3, pc}
   d4762:	0000      	.short	0x0000
   d4764:	00030220 	.word	0x00030220

000d4768 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b03      	ldr	r3, [pc, #12]	; (d4778 <system_ctrl_set_result+0x10>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4772:	9301      	str	r3, [sp, #4]
   d4774:	bd08      	pop	{r3, pc}
   d4776:	0000      	.short	0x0000
   d4778:	00030220 	.word	0x00030220

000d477c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <spark_cloud_flag_connected+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	695b      	ldr	r3, [r3, #20]
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	00030244 	.word	0x00030244

000d478c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <spark_send_event+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	6a1b      	ldr	r3, [r3, #32]
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	00030244 	.word	0x00030244

000d479c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	00030244 	.word	0x00030244

000d47ac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <network_connect+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	685b      	ldr	r3, [r3, #4]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	00030240 	.word	0x00030240

000d47bc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <network_connecting+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	689b      	ldr	r3, [r3, #8]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030240 	.word	0x00030240

000d47cc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <network_disconnect+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	68db      	ldr	r3, [r3, #12]
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030240 	.word	0x00030240

000d47dc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <network_ready+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	691b      	ldr	r3, [r3, #16]
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030240 	.word	0x00030240

000d47ec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <network_on+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	695b      	ldr	r3, [r3, #20]
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030240 	.word	0x00030240

000d47fc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <network_off+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	699b      	ldr	r3, [r3, #24]
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030240 	.word	0x00030240

000d480c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <network_listen+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	69db      	ldr	r3, [r3, #28]
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030240 	.word	0x00030240

000d481c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <network_listening+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	6a1b      	ldr	r3, [r3, #32]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	00030240 	.word	0x00030240

000d482c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <network_set_listen_timeout+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	00030240 	.word	0x00030240

000d483c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <network_get_listen_timeout+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	00030240 	.word	0x00030240

000d484c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <malloc+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	681b      	ldr	r3, [r3, #0]
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	0003021c 	.word	0x0003021c

000d485c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <free+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	685b      	ldr	r3, [r3, #4]
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	0003021c 	.word	0x0003021c

000d486c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <realloc+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	689b      	ldr	r3, [r3, #8]
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	0003021c 	.word	0x0003021c

000d487c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <abort+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	0003021c 	.word	0x0003021c

000d488c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <_malloc_r+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	0003021c 	.word	0x0003021c

000d489c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d489c:	2100      	movs	r1, #0
   d489e:	f7ff bf41 	b.w	d4724 <system_delay_ms>

000d48a2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d48a2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d48a4:	6883      	ldr	r3, [r0, #8]
   d48a6:	4604      	mov	r4, r0
   d48a8:	b90b      	cbnz	r3, d48ae <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d48aa:	f001 fa38 	bl	d5d1e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d48ae:	68c3      	ldr	r3, [r0, #12]
   d48b0:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d48b2:	68a3      	ldr	r3, [r4, #8]
   d48b4:	b11b      	cbz	r3, d48be <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48b6:	2203      	movs	r2, #3
   d48b8:	4621      	mov	r1, r4
   d48ba:	4620      	mov	r0, r4
   d48bc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d48be:	4620      	mov	r0, r4
   d48c0:	2110      	movs	r1, #16
}
   d48c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d48c6:	f001 ba0e 	b.w	d5ce6 <_ZdlPvj>

000d48ca <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d48ca:	b510      	push	{r4, lr}
   d48cc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d48ce:	6800      	ldr	r0, [r0, #0]
   d48d0:	b108      	cbz	r0, d48d6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d48d2:	f7ff fdff 	bl	d44d4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d48d6:	4620      	mov	r0, r4
   d48d8:	bd10      	pop	{r4, pc}

000d48da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d48da:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d48dc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d48de:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d48e0:	689b      	ldr	r3, [r3, #8]
   d48e2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d48e4:	68a3      	ldr	r3, [r4, #8]
   d48e6:	3b01      	subs	r3, #1
   d48e8:	60a3      	str	r3, [r4, #8]
   d48ea:	b92b      	cbnz	r3, d48f8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d48ec:	6823      	ldr	r3, [r4, #0]
   d48ee:	4620      	mov	r0, r4
   d48f0:	68db      	ldr	r3, [r3, #12]
        }
    }
   d48f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d48f6:	4718      	bx	r3
   d48f8:	bd10      	pop	{r4, pc}

000d48fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d48fa:	680b      	ldr	r3, [r1, #0]
   d48fc:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d48fe:	b113      	cbz	r3, d4906 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4900:	685a      	ldr	r2, [r3, #4]
   d4902:	3201      	adds	r2, #1
   d4904:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4906:	4770      	bx	lr

000d4908 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4908:	b510      	push	{r4, lr}
   d490a:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d490c:	6800      	ldr	r0, [r0, #0]
   d490e:	b128      	cbz	r0, d491c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4910:	6843      	ldr	r3, [r0, #4]
   d4912:	3b01      	subs	r3, #1
   d4914:	6043      	str	r3, [r0, #4]
   d4916:	b90b      	cbnz	r3, d491c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4918:	f7ff ffdf 	bl	d48da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d491c:	4620      	mov	r0, r4
   d491e:	bd10      	pop	{r4, pc}

000d4920 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4920:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4922:	4c06      	ldr	r4, [pc, #24]	; (d493c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4924:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4926:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4928:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d492a:	f7ff fdcb 	bl	d44c4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d492e:	4620      	mov	r0, r4
   d4930:	4a03      	ldr	r2, [pc, #12]	; (d4940 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4932:	4904      	ldr	r1, [pc, #16]	; (d4944 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4938:	f001 b9d0 	b.w	d5cdc <__aeabi_atexit>
   d493c:	2003e3d0 	.word	0x2003e3d0
   d4940:	2003e390 	.word	0x2003e390
   d4944:	000d48cb 	.word	0x000d48cb

000d4948 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4948:	4770      	bx	lr

000d494a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d494a:	2000      	movs	r0, #0
   d494c:	4770      	bx	lr

000d494e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d494e:	b510      	push	{r4, lr}
   d4950:	2110      	movs	r1, #16
   d4952:	4604      	mov	r4, r0
   d4954:	f001 f9c7 	bl	d5ce6 <_ZdlPvj>
   d4958:	4620      	mov	r0, r4
   d495a:	bd10      	pop	{r4, pc}

000d495c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d495c:	b508      	push	{r3, lr}
      { delete this; }
   d495e:	b108      	cbz	r0, d4964 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4960:	f7ff fff5 	bl	d494e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4964:	bd08      	pop	{r3, pc}

000d4966 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4966:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4968:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d496a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d496c:	b113      	cbz	r3, d4974 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d496e:	2203      	movs	r2, #3
   d4970:	4601      	mov	r1, r0
   d4972:	4798      	blx	r3
    }
   d4974:	4620      	mov	r0, r4
   d4976:	bd10      	pop	{r4, pc}

000d4978 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4978:	2200      	movs	r2, #0
   d497a:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d497c:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d497e:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4982:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4984:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4988:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d498a:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d498c:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d498e:	680c      	ldr	r4, [r1, #0]
   d4990:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4992:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4994:	bd10      	pop	{r4, pc}

000d4996 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4996:	b510      	push	{r4, lr}
   d4998:	4604      	mov	r4, r0
    free((void*)msg_);
   d499a:	6800      	ldr	r0, [r0, #0]
   d499c:	f7ff ff5e 	bl	d485c <free>
}
   d49a0:	4620      	mov	r0, r4
   d49a2:	bd10      	pop	{r4, pc}

000d49a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d49a4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d49a6:	68c4      	ldr	r4, [r0, #12]
   d49a8:	b1f4      	cbz	r4, d49e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d49aa:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d49ac:	2b02      	cmp	r3, #2
   d49ae:	d103      	bne.n	d49b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d49b0:	f104 000c 	add.w	r0, r4, #12
   d49b4:	f7ff ffef 	bl	d4996 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d49b8:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d49ba:	b135      	cbz	r5, d49ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d49bc:	4628      	mov	r0, r5
   d49be:	f7ff ffd2 	bl	d4966 <_ZNSt14_Function_baseD1Ev>
   d49c2:	2110      	movs	r1, #16
   d49c4:	4628      	mov	r0, r5
   d49c6:	f001 f98e 	bl	d5ce6 <_ZdlPvj>
   d49ca:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d49cc:	b135      	cbz	r5, d49dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d49ce:	4628      	mov	r0, r5
   d49d0:	f7ff ffc9 	bl	d4966 <_ZNSt14_Function_baseD1Ev>
   d49d4:	2110      	movs	r1, #16
   d49d6:	4628      	mov	r0, r5
   d49d8:	f001 f985 	bl	d5ce6 <_ZdlPvj>
   d49dc:	4620      	mov	r0, r4
   d49de:	2114      	movs	r1, #20
   d49e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d49e4:	f001 b97f 	b.w	d5ce6 <_ZdlPvj>
   d49e8:	bd38      	pop	{r3, r4, r5, pc}

000d49ea <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d49ea:	b513      	push	{r0, r1, r4, lr}
   d49ec:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d49ee:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d49f2:	2300      	movs	r3, #0
   d49f4:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d49f6:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d49f8:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d49fa:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d49fc:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d49fe:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4a00:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4a02:	f7ff ff81 	bl	d4908 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a06:	4620      	mov	r0, r4
   d4a08:	b002      	add	sp, #8
   d4a0a:	bd10      	pop	{r4, pc}

000d4a0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4a0e:	460c      	mov	r4, r1
   d4a10:	ad02      	add	r5, sp, #8
   d4a12:	f854 3b04 	ldr.w	r3, [r4], #4
   d4a16:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4a1a:	4606      	mov	r6, r0
   d4a1c:	460f      	mov	r7, r1
   d4a1e:	a801      	add	r0, sp, #4
   d4a20:	4621      	mov	r1, r4
   d4a22:	f7ff ff6a 	bl	d48fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4a26:	4629      	mov	r1, r5
   d4a28:	4630      	mov	r0, r6
   d4a2a:	f7ff ffde 	bl	d49ea <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4a2e:	a801      	add	r0, sp, #4
   d4a30:	f7ff ff6a 	bl	d4908 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a34:	4620      	mov	r0, r4
   d4a36:	f7ff ff67 	bl	d4908 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4a3a:	4638      	mov	r0, r7
   d4a3c:	2108      	movs	r1, #8
   d4a3e:	f001 f952 	bl	d5ce6 <_ZdlPvj>
        return p;
    }
   d4a42:	4630      	mov	r0, r6
   d4a44:	b003      	add	sp, #12
   d4a46:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4a48 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4a48:	b513      	push	{r0, r1, r4, lr}
   d4a4a:	460b      	mov	r3, r1
   d4a4c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a4e:	c803      	ldmia	r0, {r0, r1}
   d4a50:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4a54:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4a58:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4a5c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4a60:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4a64:	b002      	add	sp, #8
   d4a66:	bd10      	pop	{r4, pc}

000d4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4a68:	b538      	push	{r3, r4, r5, lr}
   d4a6a:	2300      	movs	r3, #0
   d4a6c:	4604      	mov	r4, r0
   d4a6e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4a70:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4a72:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4a74:	f7ff fb0f 	bl	d4096 <_Znwj>
   d4a78:	b128      	cbz	r0, d4a86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4a7a:	2301      	movs	r3, #1
   d4a7c:	6043      	str	r3, [r0, #4]
   d4a7e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4a80:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4a82:	6003      	str	r3, [r0, #0]
   d4a84:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4a86:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4a88:	4620      	mov	r0, r4
   d4a8a:	bd38      	pop	{r3, r4, r5, pc}
   d4a8c:	000d6d2c 	.word	0x000d6d2c

000d4a90 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a90:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4a92:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a94:	b90a      	cbnz	r2, d4a9a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4a96:	f001 f942 	bl	d5d1e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a9a:	68c3      	ldr	r3, [r0, #12]
    }
   d4a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4aa0:	4718      	bx	r3

000d4aa2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4aa2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4aa4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4aa6:	f100 0110 	add.w	r1, r0, #16
   d4aaa:	f7ff fff1 	bl	d4a90 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4aae:	bd08      	pop	{r3, pc}

000d4ab0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ab0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4ab2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ab4:	b90a      	cbnz	r2, d4aba <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4ab6:	f001 f932 	bl	d5d1e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4aba:	68c3      	ldr	r3, [r0, #12]
    }
   d4abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4ac0:	4718      	bx	r3

000d4ac2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4ac2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4ac4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4ac6:	f100 0110 	add.w	r1, r0, #16
   d4aca:	f7ff fff1 	bl	d4ab0 <_ZNKSt8functionIFvRKbEEclES1_>
   d4ace:	bd08      	pop	{r3, pc}

000d4ad0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4ad0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ad2:	2300      	movs	r3, #0
   d4ad4:	6083      	str	r3, [r0, #8]
   d4ad6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4ad8:	4604      	mov	r4, r0
   d4ada:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4adc:	b12b      	cbz	r3, d4aea <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4ade:	2202      	movs	r2, #2
   d4ae0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4ae2:	68eb      	ldr	r3, [r5, #12]
   d4ae4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4ae6:	68ab      	ldr	r3, [r5, #8]
   d4ae8:	60a3      	str	r3, [r4, #8]
	}
    }
   d4aea:	4620      	mov	r0, r4
   d4aec:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4af0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4af0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4af2:	b089      	sub	sp, #36	; 0x24
   d4af4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4af6:	4668      	mov	r0, sp
   d4af8:	f7ff ff3e 	bl	d4978 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4afc:	2300      	movs	r3, #0
   d4afe:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4b02:	f04f 0202 	mov.w	r2, #2
   d4b06:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4b0a:	2b00      	cmp	r3, #0
   d4b0c:	d103      	bne.n	d4b16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4b0e:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4b12:	2900      	cmp	r1, #0
   d4b14:	d1f7      	bne.n	d4b06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4b16:	d002      	beq.n	d4b1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4b18:	f88d 3008 	strb.w	r3, [sp, #8]
   d4b1c:	e063      	b.n	d4be6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4b1e:	f114 050c 	adds.w	r5, r4, #12
   d4b22:	d003      	beq.n	d4b2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4b24:	4669      	mov	r1, sp
   d4b26:	4628      	mov	r0, r5
   d4b28:	f7ff ff26 	bl	d4978 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4b2c:	f3bf 8f5f 	dmb	sy
   d4b30:	2301      	movs	r3, #1
   d4b32:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4b34:	2000      	movs	r0, #0
   d4b36:	f104 0308 	add.w	r3, r4, #8
   d4b3a:	f3bf 8f5f 	dmb	sy
   d4b3e:	e853 6f00 	ldrex	r6, [r3]
   d4b42:	e843 0200 	strex	r2, r0, [r3]
   d4b46:	2a00      	cmp	r2, #0
   d4b48:	d1f9      	bne.n	d4b3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4b4a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4b4e:	2e00      	cmp	r6, #0
   d4b50:	d049      	beq.n	d4be6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4b52:	f7ff fdef 	bl	d4734 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4b56:	b120      	cbz	r0, d4b62 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4b58:	4629      	mov	r1, r5
   d4b5a:	4630      	mov	r0, r6
   d4b5c:	f7ff ff98 	bl	d4a90 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4b60:	e03a      	b.n	d4bd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4b62:	4631      	mov	r1, r6
   d4b64:	a802      	add	r0, sp, #8
   d4b66:	f7ff ffb3 	bl	d4ad0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4b6a:	68e0      	ldr	r0, [r4, #12]
   d4b6c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4b70:	b108      	cbz	r0, d4b76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4b72:	f002 f893 	bl	d6c9c <strdup>
   d4b76:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4b78:	2010      	movs	r0, #16
   d4b7a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4b7e:	f7ff fa8a 	bl	d4096 <_Znwj>
   d4b82:	4605      	mov	r5, r0
   d4b84:	b1e8      	cbz	r0, d4bc2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b86:	2700      	movs	r7, #0
   d4b88:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4b8a:	2018      	movs	r0, #24
   d4b8c:	f7ff fa83 	bl	d4096 <_Znwj>
   d4b90:	4604      	mov	r4, r0
   d4b92:	b188      	cbz	r0, d4bb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4b94:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b96:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4b98:	a802      	add	r0, sp, #8
   d4b9a:	f7ff ff55 	bl	d4a48 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b9e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4ba0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ba2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ba4:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4ba6:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4ba8:	a906      	add	r1, sp, #24
   d4baa:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4bac:	60e3      	str	r3, [r4, #12]
   d4bae:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4bb2:	9205      	str	r2, [sp, #20]
   d4bb4:	f7ff fee0 	bl	d4978 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4bb8:	4b0d      	ldr	r3, [pc, #52]	; (d4bf0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4bba:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4bbc:	4b0d      	ldr	r3, [pc, #52]	; (d4bf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4bbe:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4bc0:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4bc2:	a806      	add	r0, sp, #24
   d4bc4:	f7ff fee7 	bl	d4996 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4bc8:	a802      	add	r0, sp, #8
   d4bca:	f7ff fecc 	bl	d4966 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4bce:	2200      	movs	r2, #0
   d4bd0:	4629      	mov	r1, r5
   d4bd2:	4809      	ldr	r0, [pc, #36]	; (d4bf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4bd4:	f7ff fdb6 	bl	d4744 <application_thread_invoke>
   d4bd8:	4630      	mov	r0, r6
   d4bda:	f7ff fec4 	bl	d4966 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4bde:	2110      	movs	r1, #16
   d4be0:	4630      	mov	r0, r6
   d4be2:	f001 f880 	bl	d5ce6 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4be6:	4668      	mov	r0, sp
   d4be8:	f7ff fed5 	bl	d4996 <_ZN8particle5ErrorD1Ev>
    }
   d4bec:	b009      	add	sp, #36	; 0x24
   d4bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4bf0:	000d4aa3 	.word	0x000d4aa3
   d4bf4:	000d4d19 	.word	0x000d4d19
   d4bf8:	000d48a3 	.word	0x000d48a3

000d4bfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c00:	b08b      	sub	sp, #44	; 0x2c
   d4c02:	4606      	mov	r6, r0
   d4c04:	460f      	mov	r7, r1
   d4c06:	4690      	mov	r8, r2
   d4c08:	4699      	mov	r9, r3
   d4c0a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4c0e:	f7ff fdb5 	bl	d477c <spark_cloud_flag_connected>
   d4c12:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d4c14:	4683      	mov	fp, r0
   d4c16:	bb30      	cbnz	r0, d4c66 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4c18:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4c1c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4c1e:	a905      	add	r1, sp, #20
   d4c20:	4628      	mov	r0, r5
   d4c22:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4c26:	f7ff fea7 	bl	d4978 <_ZN8particle5ErrorC1EOS0_>
   d4c2a:	2014      	movs	r0, #20
   d4c2c:	f7ff fa33 	bl	d4096 <_Znwj>
   d4c30:	4604      	mov	r4, r0
   d4c32:	b158      	cbz	r0, d4c4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4c34:	2302      	movs	r3, #2
   d4c36:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4c38:	2301      	movs	r3, #1
   d4c3a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4c3c:	f8c0 b004 	str.w	fp, [r0, #4]
   d4c40:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4c44:	4629      	mov	r1, r5
   d4c46:	300c      	adds	r0, #12
   d4c48:	f7ff fe96 	bl	d4978 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4c4c:	4630      	mov	r0, r6
   d4c4e:	4621      	mov	r1, r4
   d4c50:	f840 4b04 	str.w	r4, [r0], #4
   d4c54:	f7ff ff08 	bl	d4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4c58:	4628      	mov	r0, r5
   d4c5a:	f7ff fe9c 	bl	d4996 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4c5e:	a805      	add	r0, sp, #20
   d4c60:	f7ff fe99 	bl	d4996 <_ZN8particle5ErrorD1Ev>
   d4c64:	e052      	b.n	d4d0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4c66:	2400      	movs	r4, #0
   d4c68:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4c6a:	2014      	movs	r0, #20
   d4c6c:	606c      	str	r4, [r5, #4]
   d4c6e:	60ac      	str	r4, [r5, #8]
   d4c70:	9307      	str	r3, [sp, #28]
   d4c72:	f7ff fa10 	bl	d4096 <_Znwj>
   d4c76:	4601      	mov	r1, r0
   d4c78:	b118      	cbz	r0, d4c82 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d4c7a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4c7c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4c7e:	6044      	str	r4, [r0, #4]
   d4c80:	6084      	str	r4, [r0, #8]
   d4c82:	a804      	add	r0, sp, #16
   d4c84:	9103      	str	r1, [sp, #12]
   d4c86:	f7ff feef 	bl	d4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4c8a:	4b22      	ldr	r3, [pc, #136]	; (d4d14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d4c8c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4c8e:	2008      	movs	r0, #8
   d4c90:	f7ff fa01 	bl	d4096 <_Znwj>
   d4c94:	4604      	mov	r4, r0
   d4c96:	b128      	cbz	r0, d4ca4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4c98:	9b03      	ldr	r3, [sp, #12]
   d4c9a:	f840 3b04 	str.w	r3, [r0], #4
   d4c9e:	a904      	add	r1, sp, #16
   d4ca0:	f7ff fe2b 	bl	d48fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4ca4:	9500      	str	r5, [sp, #0]
   d4ca6:	fa5f f38a 	uxtb.w	r3, sl
   d4caa:	464a      	mov	r2, r9
   d4cac:	4641      	mov	r1, r8
   d4cae:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4cb0:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4cb2:	f7ff fd6b 	bl	d478c <spark_send_event>
   d4cb6:	b920      	cbnz	r0, d4cc2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4cb8:	9b03      	ldr	r3, [sp, #12]
   d4cba:	785b      	ldrb	r3, [r3, #1]
   d4cbc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4cc0:	b183      	cbz	r3, d4ce4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d4cc2:	9b03      	ldr	r3, [sp, #12]
   d4cc4:	9305      	str	r3, [sp, #20]
   d4cc6:	a904      	add	r1, sp, #16
   d4cc8:	a806      	add	r0, sp, #24
   d4cca:	f7ff fe16 	bl	d48fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4cce:	a905      	add	r1, sp, #20
   d4cd0:	4630      	mov	r0, r6
   d4cd2:	f7ff fe8a 	bl	d49ea <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4cd6:	a806      	add	r0, sp, #24
   d4cd8:	f7ff fe16 	bl	d4908 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4cdc:	a804      	add	r0, sp, #16
   d4cde:	f7ff fe13 	bl	d4908 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ce2:	e013      	b.n	d4d0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d4ce4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4ce8:	a905      	add	r1, sp, #20
   d4cea:	a803      	add	r0, sp, #12
   d4cec:	9205      	str	r2, [sp, #20]
   d4cee:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4cf2:	f7ff fefd 	bl	d4af0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4cf6:	a805      	add	r0, sp, #20
   d4cf8:	f7ff fe4d 	bl	d4996 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4cfc:	a805      	add	r0, sp, #20
   d4cfe:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4d00:	f7ff fe84 	bl	d4a0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d4d04:	a806      	add	r0, sp, #24
   d4d06:	f7ff fdff 	bl	d4908 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d0a:	e7da      	b.n	d4cc2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d4d0c:	4630      	mov	r0, r6
   d4d0e:	b00b      	add	sp, #44	; 0x2c
   d4d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4d14:	000d4e89 	.word	0x000d4e89

000d4d18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4d18:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d1c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4d1e:	d006      	beq.n	d4d2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4d20:	2a03      	cmp	r2, #3
   d4d22:	d017      	beq.n	d4d54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4d24:	2a01      	cmp	r2, #1
   d4d26:	d122      	bne.n	d4d6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4d28:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4d2a:	6003      	str	r3, [r0, #0]
	      break;
   d4d2c:	e01f      	b.n	d4d6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4d2e:	2018      	movs	r0, #24
   d4d30:	680e      	ldr	r6, [r1, #0]
   d4d32:	f7ff f9b0 	bl	d4096 <_Znwj>
   d4d36:	4605      	mov	r5, r0
   d4d38:	b150      	cbz	r0, d4d50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4d3a:	4631      	mov	r1, r6
   d4d3c:	f7ff fec8 	bl	d4ad0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4d40:	6930      	ldr	r0, [r6, #16]
   d4d42:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4d46:	b108      	cbz	r0, d4d4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4d48:	f001 ffa8 	bl	d6c9c <strdup>
   d4d4c:	6128      	str	r0, [r5, #16]
   d4d4e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4d50:	6025      	str	r5, [r4, #0]
   d4d52:	e00c      	b.n	d4d6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4d54:	6804      	ldr	r4, [r0, #0]
   d4d56:	b154      	cbz	r4, d4d6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d4d58:	f104 0010 	add.w	r0, r4, #16
   d4d5c:	f7ff fe1b 	bl	d4996 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d60:	4620      	mov	r0, r4
   d4d62:	f7ff fe00 	bl	d4966 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4d66:	2118      	movs	r1, #24
   d4d68:	4620      	mov	r0, r4
   d4d6a:	f000 ffbc 	bl	d5ce6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4d6e:	2000      	movs	r0, #0
   d4d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d72 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4d72:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d74:	2300      	movs	r3, #0
   d4d76:	6083      	str	r3, [r0, #8]
   d4d78:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4d7a:	4604      	mov	r4, r0
   d4d7c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4d7e:	b12b      	cbz	r3, d4d8c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4d80:	2202      	movs	r2, #2
   d4d82:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4d84:	68eb      	ldr	r3, [r5, #12]
   d4d86:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4d88:	68ab      	ldr	r3, [r5, #8]
   d4d8a:	60a3      	str	r3, [r4, #8]
	}
    }
   d4d8c:	4620      	mov	r0, r4
   d4d8e:	bd38      	pop	{r3, r4, r5, pc}

000d4d90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4d90:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4d92:	b570      	push	{r4, r5, r6, lr}
   d4d94:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4d96:	d006      	beq.n	d4da6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4d98:	2a03      	cmp	r2, #3
   d4d9a:	d011      	beq.n	d4dc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4d9c:	2a01      	cmp	r2, #1
   d4d9e:	d118      	bne.n	d4dd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4da0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4da2:	6003      	str	r3, [r0, #0]
	      break;
   d4da4:	e015      	b.n	d4dd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4da6:	2014      	movs	r0, #20
   d4da8:	680e      	ldr	r6, [r1, #0]
   d4daa:	f7ff f974 	bl	d4096 <_Znwj>
   d4dae:	4605      	mov	r5, r0
   d4db0:	b120      	cbz	r0, d4dbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4db2:	4631      	mov	r1, r6
   d4db4:	f7ff ffdd 	bl	d4d72 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4db8:	7c33      	ldrb	r3, [r6, #16]
   d4dba:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4dbc:	6025      	str	r5, [r4, #0]
   d4dbe:	e008      	b.n	d4dd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4dc0:	6804      	ldr	r4, [r0, #0]
   d4dc2:	b134      	cbz	r4, d4dd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4dc4:	4620      	mov	r0, r4
   d4dc6:	f7ff fdce 	bl	d4966 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4dca:	2114      	movs	r1, #20
   d4dcc:	4620      	mov	r0, r4
   d4dce:	f000 ff8a 	bl	d5ce6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4dd2:	2000      	movs	r0, #0
   d4dd4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4dd8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4dd8:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4dda:	2300      	movs	r3, #0
   d4ddc:	b087      	sub	sp, #28
   d4dde:	460c      	mov	r4, r1
   d4de0:	f3bf 8f5f 	dmb	sy
   d4de4:	e850 6f00 	ldrex	r6, [r0]
   d4de8:	e840 3200 	strex	r2, r3, [r0]
   d4dec:	2a00      	cmp	r2, #0
   d4dee:	d1f9      	bne.n	d4de4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4df0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4df4:	2e00      	cmp	r6, #0
   d4df6:	d03f      	beq.n	d4e78 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4df8:	4618      	mov	r0, r3
   d4dfa:	f7ff fc9b 	bl	d4734 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4dfe:	4607      	mov	r7, r0
   d4e00:	b120      	cbz	r0, d4e0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4e02:	4621      	mov	r1, r4
   d4e04:	4630      	mov	r0, r6
   d4e06:	f7ff fe53 	bl	d4ab0 <_ZNKSt8functionIFvRKbEEclES1_>
   d4e0a:	e02e      	b.n	d4e6a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4e0c:	4631      	mov	r1, r6
   d4e0e:	a801      	add	r0, sp, #4
   d4e10:	f7ff ffaf 	bl	d4d72 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4e14:	7823      	ldrb	r3, [r4, #0]
   d4e16:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4e1a:	2010      	movs	r0, #16
   d4e1c:	f7ff f93b 	bl	d4096 <_Znwj>
   d4e20:	4605      	mov	r5, r0
   d4e22:	b1d0      	cbz	r0, d4e5a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e24:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e26:	2014      	movs	r0, #20
   d4e28:	f7ff f935 	bl	d4096 <_Znwj>
   d4e2c:	4604      	mov	r4, r0
   d4e2e:	b178      	cbz	r0, d4e50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e30:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4e32:	4601      	mov	r1, r0
   d4e34:	a801      	add	r0, sp, #4
   d4e36:	f7ff fe07 	bl	d4a48 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e3a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4e3c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e3e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e40:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4e42:	9203      	str	r2, [sp, #12]
   d4e44:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e46:	60e3      	str	r3, [r4, #12]
   d4e48:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4e4c:	9204      	str	r2, [sp, #16]
   d4e4e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4e50:	4b0a      	ldr	r3, [pc, #40]	; (d4e7c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4e52:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4e54:	4b0a      	ldr	r3, [pc, #40]	; (d4e80 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e56:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4e58:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e5a:	a801      	add	r0, sp, #4
   d4e5c:	f7ff fd83 	bl	d4966 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4e60:	2200      	movs	r2, #0
   d4e62:	4629      	mov	r1, r5
   d4e64:	4807      	ldr	r0, [pc, #28]	; (d4e84 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4e66:	f7ff fc6d 	bl	d4744 <application_thread_invoke>
   d4e6a:	4630      	mov	r0, r6
   d4e6c:	f7ff fd7b 	bl	d4966 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4e70:	2110      	movs	r1, #16
   d4e72:	4630      	mov	r0, r6
   d4e74:	f000 ff37 	bl	d5ce6 <_ZdlPvj>
        }
    }
   d4e78:	b007      	add	sp, #28
   d4e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e7c:	000d4ac3 	.word	0x000d4ac3
   d4e80:	000d4d91 	.word	0x000d4d91
   d4e84:	000d48a3 	.word	0x000d48a3

000d4e88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4e88:	b530      	push	{r4, r5, lr}
   d4e8a:	b085      	sub	sp, #20
   d4e8c:	4604      	mov	r4, r0
   d4e8e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4e90:	4668      	mov	r0, sp
   d4e92:	4611      	mov	r1, r2
   d4e94:	f7ff fdba 	bl	d4a0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4e98:	b17c      	cbz	r4, d4eba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4e9a:	b224      	sxth	r4, r4
   d4e9c:	4628      	mov	r0, r5
   d4e9e:	b10d      	cbz	r5, d4ea4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4ea0:	f001 fefc 	bl	d6c9c <strdup>
   d4ea4:	9002      	str	r0, [sp, #8]
   d4ea6:	a902      	add	r1, sp, #8
   d4ea8:	4668      	mov	r0, sp
   d4eaa:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4eae:	f7ff fe1f 	bl	d4af0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4eb2:	a802      	add	r0, sp, #8
   d4eb4:	f7ff fd6f 	bl	d4996 <_ZN8particle5ErrorD1Ev>
   d4eb8:	e01d      	b.n	d4ef6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4eba:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4ebc:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4ec0:	f04f 0201 	mov.w	r2, #1
   d4ec4:	e8d0 3f4f 	ldrexb	r3, [r0]
   d4ec8:	42a3      	cmp	r3, r4
   d4eca:	d103      	bne.n	d4ed4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d4ecc:	e8c0 2f41 	strexb	r1, r2, [r0]
   d4ed0:	2900      	cmp	r1, #0
   d4ed2:	d1f7      	bne.n	d4ec4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d4ed4:	d002      	beq.n	d4edc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d4ed6:	f88d 3008 	strb.w	r3, [sp, #8]
   d4eda:	e00c      	b.n	d4ef6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d4edc:	f110 010c 	adds.w	r1, r0, #12
   d4ee0:	f04f 0301 	mov.w	r3, #1
   d4ee4:	bf18      	it	ne
   d4ee6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4ee8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d4eec:	3004      	adds	r0, #4
   d4eee:	f800 3c03 	strb.w	r3, [r0, #-3]
   d4ef2:	f7ff ff71 	bl	d4dd8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d4ef6:	a801      	add	r0, sp, #4
   d4ef8:	f7ff fd06 	bl	d4908 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d4efc:	b005      	add	sp, #20
   d4efe:	bd30      	pop	{r4, r5, pc}

000d4f00 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f00:	2200      	movs	r2, #0
   d4f02:	4611      	mov	r1, r2
   d4f04:	6840      	ldr	r0, [r0, #4]
   d4f06:	f7ff bc89 	b.w	d481c <network_listening>

000d4f0a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4f0a:	2200      	movs	r2, #0
   d4f0c:	4611      	mov	r1, r2
   d4f0e:	6840      	ldr	r0, [r0, #4]
   d4f10:	f7ff bc94 	b.w	d483c <network_get_listen_timeout>

000d4f14 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4f14:	2200      	movs	r2, #0
   d4f16:	6840      	ldr	r0, [r0, #4]
   d4f18:	f7ff bc88 	b.w	d482c <network_set_listen_timeout>

000d4f1c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f1c:	2200      	movs	r2, #0
   d4f1e:	f081 0101 	eor.w	r1, r1, #1
   d4f22:	6840      	ldr	r0, [r0, #4]
   d4f24:	f7ff bc72 	b.w	d480c <network_listen>

000d4f28 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4f28:	2300      	movs	r3, #0
   d4f2a:	461a      	mov	r2, r3
   d4f2c:	4619      	mov	r1, r3
   d4f2e:	6840      	ldr	r0, [r0, #4]
   d4f30:	f7ff bc64 	b.w	d47fc <network_off>

000d4f34 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4f34:	2300      	movs	r3, #0
   d4f36:	461a      	mov	r2, r3
   d4f38:	4619      	mov	r1, r3
   d4f3a:	6840      	ldr	r0, [r0, #4]
   d4f3c:	f7ff bc56 	b.w	d47ec <network_on>

000d4f40 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4f40:	2200      	movs	r2, #0
   d4f42:	4611      	mov	r1, r2
   d4f44:	6840      	ldr	r0, [r0, #4]
   d4f46:	f7ff bc49 	b.w	d47dc <network_ready>

000d4f4a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f4a:	2200      	movs	r2, #0
   d4f4c:	4611      	mov	r1, r2
   d4f4e:	6840      	ldr	r0, [r0, #4]
   d4f50:	f7ff bc34 	b.w	d47bc <network_connecting>

000d4f54 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f54:	2200      	movs	r2, #0
   d4f56:	2102      	movs	r1, #2
   d4f58:	6840      	ldr	r0, [r0, #4]
   d4f5a:	f7ff bc37 	b.w	d47cc <network_disconnect>

000d4f5e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f5e:	2300      	movs	r3, #0
   d4f60:	461a      	mov	r2, r3
   d4f62:	6840      	ldr	r0, [r0, #4]
   d4f64:	f7ff bc22 	b.w	d47ac <network_connect>

000d4f68 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4f68:	4b02      	ldr	r3, [pc, #8]	; (d4f74 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4f6a:	2203      	movs	r2, #3
   d4f6c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4f6e:	4a02      	ldr	r2, [pc, #8]	; (d4f78 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4f70:	601a      	str	r2, [r3, #0]
   d4f72:	4770      	bx	lr
   d4f74:	2003e3d4 	.word	0x2003e3d4
   d4f78:	000d6d48 	.word	0x000d6d48

000d4f7c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4f7c:	4770      	bx	lr

000d4f7e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f80:	4606      	mov	r6, r0
   d4f82:	4615      	mov	r5, r2
   d4f84:	460c      	mov	r4, r1
   d4f86:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4f88:	42bc      	cmp	r4, r7
   d4f8a:	d006      	beq.n	d4f9a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4f8c:	6833      	ldr	r3, [r6, #0]
   d4f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4f92:	689b      	ldr	r3, [r3, #8]
   d4f94:	4630      	mov	r0, r6
   d4f96:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4f98:	e7f6      	b.n	d4f88 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4f9a:	4628      	mov	r0, r5
   d4f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f9e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4f9e:	2200      	movs	r2, #0
   d4fa0:	7c00      	ldrb	r0, [r0, #16]
   d4fa2:	f7ff bad7 	b.w	d4554 <HAL_I2C_Write_Data>

000d4fa6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4fa6:	2100      	movs	r1, #0
   d4fa8:	7c00      	ldrb	r0, [r0, #16]
   d4faa:	f7ff badb 	b.w	d4564 <HAL_I2C_Available_Data>

000d4fae <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4fae:	2100      	movs	r1, #0
   d4fb0:	7c00      	ldrb	r0, [r0, #16]
   d4fb2:	f7ff badf 	b.w	d4574 <HAL_I2C_Read_Data>

000d4fb6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4fb6:	2100      	movs	r1, #0
   d4fb8:	7c00      	ldrb	r0, [r0, #16]
   d4fba:	f7ff bae3 	b.w	d4584 <HAL_I2C_Peek_Data>

000d4fbe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4fbe:	2100      	movs	r1, #0
   d4fc0:	7c00      	ldrb	r0, [r0, #16]
   d4fc2:	f7ff bae7 	b.w	d4594 <HAL_I2C_Flush_Data>

000d4fc6 <_ZN7TwoWireD0Ev>:
   d4fc6:	b510      	push	{r4, lr}
   d4fc8:	2114      	movs	r1, #20
   d4fca:	4604      	mov	r4, r0
   d4fcc:	f000 fe8b 	bl	d5ce6 <_ZdlPvj>
   d4fd0:	4620      	mov	r0, r4
   d4fd2:	bd10      	pop	{r4, pc}

000d4fd4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4fd4:	b510      	push	{r4, lr}
   d4fd6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4fd8:	2300      	movs	r3, #0
   d4fda:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4fe0:	60a3      	str	r3, [r4, #8]
   d4fe2:	4b04      	ldr	r3, [pc, #16]	; (d4ff4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d4fe4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4fe6:	4608      	mov	r0, r1
   d4fe8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4fea:	4611      	mov	r1, r2
   d4fec:	f7ff fae2 	bl	d45b4 <HAL_I2C_Init>
}
   d4ff0:	4620      	mov	r0, r4
   d4ff2:	bd10      	pop	{r4, pc}
   d4ff4:	000d6d7c 	.word	0x000d6d7c

000d4ff8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4ff8:	2100      	movs	r1, #0
   d4ffa:	7c00      	ldrb	r0, [r0, #16]
   d4ffc:	f7ff bad2 	b.w	d45a4 <HAL_I2C_Is_Enabled>

000d5000 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d5000:	f7ff baa0 	b.w	d4544 <HAL_Interrupts_Disable_All>

000d5004 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d5004:	f7ff ba96 	b.w	d4534 <HAL_Interrupts_Enable_All>

000d5008 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5008:	4770      	bx	lr

000d500a <_ZN9IPAddressD0Ev>:
   d500a:	b510      	push	{r4, lr}
   d500c:	2118      	movs	r1, #24
   d500e:	4604      	mov	r4, r0
   d5010:	f000 fe69 	bl	d5ce6 <_ZdlPvj>
   d5014:	4620      	mov	r0, r4
   d5016:	bd10      	pop	{r4, pc}

000d5018 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5018:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d501a:	7d03      	ldrb	r3, [r0, #20]
   d501c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d501e:	b08d      	sub	sp, #52	; 0x34
   d5020:	460e      	mov	r6, r1
   d5022:	f100 0704 	add.w	r7, r0, #4
   d5026:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d502a:	d002      	beq.n	d5032 <_ZNK9IPAddress7printToER5Print+0x1a>
   d502c:	f100 0508 	add.w	r5, r0, #8
   d5030:	e018      	b.n	d5064 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5032:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5034:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5036:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d503a:	232f      	movs	r3, #47	; 0x2f
   d503c:	462a      	mov	r2, r5
   d503e:	200a      	movs	r0, #10
   d5040:	f7ff fac0 	bl	d45c4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5044:	4628      	mov	r0, r5
   d5046:	f001 fe44 	bl	d6cd2 <strlen>
   d504a:	6833      	ldr	r3, [r6, #0]
   d504c:	4602      	mov	r2, r0
   d504e:	68db      	ldr	r3, [r3, #12]
   d5050:	4629      	mov	r1, r5
   d5052:	4630      	mov	r0, r6
   d5054:	4798      	blx	r3
   d5056:	e00f      	b.n	d5078 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5058:	b124      	cbz	r4, d5064 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d505a:	212e      	movs	r1, #46	; 0x2e
   d505c:	4630      	mov	r0, r6
   d505e:	f000 f9d5 	bl	d540c <_ZN5Print5printEc>
   d5062:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5064:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5068:	220a      	movs	r2, #10
   d506a:	4630      	mov	r0, r6
   d506c:	f000 f9d1 	bl	d5412 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5070:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5072:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5074:	d1f0      	bne.n	d5058 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5076:	4620      	mov	r0, r4
    }
    return n;
}
   d5078:	b00d      	add	sp, #52	; 0x34
   d507a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d507c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d507c:	b510      	push	{r4, lr}
   d507e:	4b05      	ldr	r3, [pc, #20]	; (d5094 <_ZN9IPAddressC1Ev+0x18>)
   d5080:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5082:	2211      	movs	r2, #17
   d5084:	f840 3b04 	str.w	r3, [r0], #4
   d5088:	2100      	movs	r1, #0
   d508a:	f001 fdce 	bl	d6c2a <memset>
{
    clear();
}
   d508e:	4620      	mov	r0, r4
   d5090:	bd10      	pop	{r4, pc}
   d5092:	bf00      	nop
   d5094:	000d6da4 	.word	0x000d6da4

000d5098 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5098:	4603      	mov	r3, r0
   d509a:	4a07      	ldr	r2, [pc, #28]	; (d50b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d509c:	b510      	push	{r4, lr}
   d509e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d50a2:	f101 0210 	add.w	r2, r1, #16
   d50a6:	f851 4b04 	ldr.w	r4, [r1], #4
   d50aa:	f843 4b04 	str.w	r4, [r3], #4
   d50ae:	4291      	cmp	r1, r2
   d50b0:	d1f9      	bne.n	d50a6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d50b2:	780a      	ldrb	r2, [r1, #0]
   d50b4:	701a      	strb	r2, [r3, #0]
}
   d50b6:	bd10      	pop	{r4, pc}
   d50b8:	000d6da4 	.word	0x000d6da4

000d50bc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d50bc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d50be:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d50c2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d50c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d50ca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d50ce:	2304      	movs	r3, #4
   d50d0:	6041      	str	r1, [r0, #4]
   d50d2:	7503      	strb	r3, [r0, #20]
   d50d4:	bd10      	pop	{r4, pc}

000d50d6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d50d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d50d8:	780d      	ldrb	r5, [r1, #0]
   d50da:	788b      	ldrb	r3, [r1, #2]
   d50dc:	784a      	ldrb	r2, [r1, #1]
   d50de:	78c9      	ldrb	r1, [r1, #3]
   d50e0:	9100      	str	r1, [sp, #0]
   d50e2:	4629      	mov	r1, r5
   d50e4:	f7ff ffea 	bl	d50bc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d50e8:	b003      	add	sp, #12
   d50ea:	bd30      	pop	{r4, r5, pc}

000d50ec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d50ec:	4b01      	ldr	r3, [pc, #4]	; (d50f4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d50ee:	4a02      	ldr	r2, [pc, #8]	; (d50f8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d50f0:	601a      	str	r2, [r3, #0]
   d50f2:	4770      	bx	lr
   d50f4:	2003e3dc 	.word	0x2003e3dc
   d50f8:	000d6e23 	.word	0x000d6e23

000d50fc <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d50fc:	2200      	movs	r2, #0
   d50fe:	4611      	mov	r1, r2
   d5100:	6840      	ldr	r0, [r0, #4]
   d5102:	f7ff bb8b 	b.w	d481c <network_listening>

000d5106 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5106:	2200      	movs	r2, #0
   d5108:	4611      	mov	r1, r2
   d510a:	6840      	ldr	r0, [r0, #4]
   d510c:	f7ff bb96 	b.w	d483c <network_get_listen_timeout>

000d5110 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5110:	2200      	movs	r2, #0
   d5112:	6840      	ldr	r0, [r0, #4]
   d5114:	f7ff bb8a 	b.w	d482c <network_set_listen_timeout>

000d5118 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5118:	2200      	movs	r2, #0
   d511a:	f081 0101 	eor.w	r1, r1, #1
   d511e:	6840      	ldr	r0, [r0, #4]
   d5120:	f7ff bb74 	b.w	d480c <network_listen>

000d5124 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5124:	2300      	movs	r3, #0
   d5126:	461a      	mov	r2, r3
   d5128:	2101      	movs	r1, #1
   d512a:	6840      	ldr	r0, [r0, #4]
   d512c:	f7ff bb66 	b.w	d47fc <network_off>

000d5130 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5130:	2300      	movs	r3, #0
   d5132:	461a      	mov	r2, r3
   d5134:	4619      	mov	r1, r3
   d5136:	6840      	ldr	r0, [r0, #4]
   d5138:	f7ff bb58 	b.w	d47ec <network_on>

000d513c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d513c:	2200      	movs	r2, #0
   d513e:	4611      	mov	r1, r2
   d5140:	6840      	ldr	r0, [r0, #4]
   d5142:	f7ff bb4b 	b.w	d47dc <network_ready>

000d5146 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5146:	2200      	movs	r2, #0
   d5148:	4611      	mov	r1, r2
   d514a:	6840      	ldr	r0, [r0, #4]
   d514c:	f7ff bb36 	b.w	d47bc <network_connecting>

000d5150 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5150:	2200      	movs	r2, #0
   d5152:	2102      	movs	r1, #2
   d5154:	6840      	ldr	r0, [r0, #4]
   d5156:	f7ff bb39 	b.w	d47cc <network_disconnect>

000d515a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d515a:	2300      	movs	r3, #0
   d515c:	461a      	mov	r2, r3
   d515e:	6840      	ldr	r0, [r0, #4]
   d5160:	f7ff bb24 	b.w	d47ac <network_connect>

000d5164 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5164:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5166:	4605      	mov	r5, r0
   d5168:	b188      	cbz	r0, d518e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d516a:	6804      	ldr	r4, [r0, #0]
   d516c:	b14c      	cbz	r4, d5182 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d516e:	68a3      	ldr	r3, [r4, #8]
   d5170:	b11b      	cbz	r3, d517a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5172:	2203      	movs	r2, #3
   d5174:	4621      	mov	r1, r4
   d5176:	4620      	mov	r0, r4
   d5178:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d517a:	2110      	movs	r1, #16
   d517c:	4620      	mov	r0, r4
   d517e:	f000 fdb2 	bl	d5ce6 <_ZdlPvj>
   d5182:	4628      	mov	r0, r5
   d5184:	2114      	movs	r1, #20
      }
   d5186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d518a:	f000 bdac 	b.w	d5ce6 <_ZdlPvj>
   d518e:	bd38      	pop	{r3, r4, r5, pc}

000d5190 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5190:	b110      	cbz	r0, d5198 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5192:	6803      	ldr	r3, [r0, #0]
   d5194:	685b      	ldr	r3, [r3, #4]
   d5196:	4718      	bx	r3
   d5198:	4770      	bx	lr

000d519a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d519a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d519c:	6803      	ldr	r3, [r0, #0]
   d519e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d51a0:	b1bb      	cbz	r3, d51d2 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d51a2:	6858      	ldr	r0, [r3, #4]
   d51a4:	f7ff f976 	bl	d4494 <os_thread_is_current>
   d51a8:	b978      	cbnz	r0, d51ca <_ZN6ThreadD1Ev+0x30>
   d51aa:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d51ac:	7c5a      	ldrb	r2, [r3, #17]
   d51ae:	b912      	cbnz	r2, d51b6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d51b0:	6858      	ldr	r0, [r3, #4]
   d51b2:	f7ff f977 	bl	d44a4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d51b6:	6823      	ldr	r3, [r4, #0]
   d51b8:	6858      	ldr	r0, [r3, #4]
   d51ba:	f7ff f97b 	bl	d44b4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51be:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d51c0:	2300      	movs	r3, #0
   d51c2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d51c4:	b128      	cbz	r0, d51d2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d51c6:	f7ff ffcd 	bl	d5164 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d51ca:	6820      	ldr	r0, [r4, #0]
   d51cc:	b108      	cbz	r0, d51d2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d51ce:	f7ff ffc9 	bl	d5164 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d51d2:	4620      	mov	r0, r4
   d51d4:	bd10      	pop	{r4, pc}

000d51d6 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d51d6:	b538      	push	{r3, r4, r5, lr}
   d51d8:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d51da:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d51de:	b108      	cbz	r0, d51e4 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d51e0:	f7fe ff5d 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d51e4:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d51e8:	b108      	cbz	r0, d51ee <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d51ea:	f7ff f973 	bl	d44d4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d51ee:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d51f2:	b135      	cbz	r5, d5202 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d51f4:	4628      	mov	r0, r5
   d51f6:	f7ff ffd0 	bl	d519a <_ZN6ThreadD1Ev>
   d51fa:	2104      	movs	r1, #4
   d51fc:	4628      	mov	r0, r5
   d51fe:	f000 fd72 	bl	d5ce6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5202:	6820      	ldr	r0, [r4, #0]
   d5204:	b108      	cbz	r0, d520a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5206:	f7ff ffc3 	bl	d5190 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d520a:	4620      	mov	r0, r4
   d520c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5210 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5210:	b510      	push	{r4, lr}
   d5212:	4b04      	ldr	r3, [pc, #16]	; (d5224 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5214:	4604      	mov	r4, r0
   d5216:	f840 3b08 	str.w	r3, [r0], #8
   d521a:	f7ff ffdc 	bl	d51d6 <_ZN5spark11MeshPublishD1Ev>
   d521e:	4620      	mov	r0, r4
   d5220:	bd10      	pop	{r4, pc}
   d5222:	bf00      	nop
   d5224:	000d6e9c 	.word	0x000d6e9c

000d5228 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5228:	b538      	push	{r3, r4, r5, lr}
   d522a:	4c0e      	ldr	r4, [pc, #56]	; (d5264 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d522c:	4b0e      	ldr	r3, [pc, #56]	; (d5268 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d522e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5230:	2500      	movs	r5, #0
   d5232:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5234:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5238:	6063      	str	r3, [r4, #4]
   d523a:	60a5      	str	r5, [r4, #8]
   d523c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5240:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5244:	f7ff f93e 	bl	d44c4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5248:	4b08      	ldr	r3, [pc, #32]	; (d526c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d524a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d524e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5252:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5254:	4620      	mov	r0, r4
   d5256:	4a06      	ldr	r2, [pc, #24]	; (d5270 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5258:	4906      	ldr	r1, [pc, #24]	; (d5274 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d525a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d525e:	f000 bd3d 	b.w	d5cdc <__aeabi_atexit>
   d5262:	bf00      	nop
   d5264:	2003e3e0 	.word	0x2003e3e0
   d5268:	000d6ed0 	.word	0x000d6ed0
   d526c:	000d6e9c 	.word	0x000d6e9c
   d5270:	2003e390 	.word	0x2003e390
   d5274:	000d5211 	.word	0x000d5211

000d5278 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5278:	2300      	movs	r3, #0
   d527a:	461a      	mov	r2, r3
   d527c:	6840      	ldr	r0, [r0, #4]
   d527e:	f7ff ba95 	b.w	d47ac <network_connect>

000d5282 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5282:	2200      	movs	r2, #0
   d5284:	2102      	movs	r1, #2
   d5286:	6840      	ldr	r0, [r0, #4]
   d5288:	f7ff baa0 	b.w	d47cc <network_disconnect>

000d528c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d528c:	2200      	movs	r2, #0
   d528e:	4611      	mov	r1, r2
   d5290:	6840      	ldr	r0, [r0, #4]
   d5292:	f7ff ba93 	b.w	d47bc <network_connecting>

000d5296 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5296:	2200      	movs	r2, #0
   d5298:	4611      	mov	r1, r2
   d529a:	6840      	ldr	r0, [r0, #4]
   d529c:	f7ff ba9e 	b.w	d47dc <network_ready>

000d52a0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d52a0:	2300      	movs	r3, #0
   d52a2:	461a      	mov	r2, r3
   d52a4:	4619      	mov	r1, r3
   d52a6:	6840      	ldr	r0, [r0, #4]
   d52a8:	f7ff baa0 	b.w	d47ec <network_on>

000d52ac <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d52ac:	2300      	movs	r3, #0
   d52ae:	461a      	mov	r2, r3
   d52b0:	4619      	mov	r1, r3
   d52b2:	6840      	ldr	r0, [r0, #4]
   d52b4:	f7ff baa2 	b.w	d47fc <network_off>

000d52b8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d52b8:	2200      	movs	r2, #0
   d52ba:	f081 0101 	eor.w	r1, r1, #1
   d52be:	6840      	ldr	r0, [r0, #4]
   d52c0:	f7ff baa4 	b.w	d480c <network_listen>

000d52c4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d52c4:	2200      	movs	r2, #0
   d52c6:	6840      	ldr	r0, [r0, #4]
   d52c8:	f7ff bab0 	b.w	d482c <network_set_listen_timeout>

000d52cc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d52cc:	2200      	movs	r2, #0
   d52ce:	4611      	mov	r1, r2
   d52d0:	6840      	ldr	r0, [r0, #4]
   d52d2:	f7ff bab3 	b.w	d483c <network_get_listen_timeout>

000d52d6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d52d6:	2200      	movs	r2, #0
   d52d8:	4611      	mov	r1, r2
   d52da:	6840      	ldr	r0, [r0, #4]
   d52dc:	f7ff ba9e 	b.w	d481c <network_listening>

000d52e0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d52e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d52e4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d52e6:	b095      	sub	sp, #84	; 0x54
   d52e8:	4616      	mov	r6, r2
   d52ea:	460d      	mov	r5, r1
   d52ec:	4607      	mov	r7, r0
    IPAddress addr;
   d52ee:	f7ff fec5 	bl	d507c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d52f2:	4621      	mov	r1, r4
   d52f4:	2220      	movs	r2, #32
   d52f6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d52f8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d52fa:	f001 fc96 	bl	d6c2a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d52fe:	2340      	movs	r3, #64	; 0x40
   d5300:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5302:	4621      	mov	r1, r4
   d5304:	466b      	mov	r3, sp
   d5306:	aa0c      	add	r2, sp, #48	; 0x30
   d5308:	4630      	mov	r0, r6
   d530a:	f7ff f96b 	bl	d45e4 <netdb_getaddrinfo>
    if (!r) {
   d530e:	4604      	mov	r4, r0
   d5310:	2800      	cmp	r0, #0
   d5312:	d144      	bne.n	d539e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5314:	4602      	mov	r2, r0
   d5316:	2101      	movs	r1, #1
   d5318:	6868      	ldr	r0, [r5, #4]
   d531a:	f7ff fa5f 	bl	d47dc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d531e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5320:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5322:	4622      	mov	r2, r4
   d5324:	6868      	ldr	r0, [r5, #4]
   d5326:	f7ff fa59 	bl	d47dc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d532a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d532c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d532e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5330:	2e00      	cmp	r6, #0
   d5332:	d034      	beq.n	d539e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5334:	2900      	cmp	r1, #0
   d5336:	d132      	bne.n	d539e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5338:	6873      	ldr	r3, [r6, #4]
   d533a:	2b02      	cmp	r3, #2
   d533c:	d002      	beq.n	d5344 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d533e:	2b0a      	cmp	r3, #10
   d5340:	d009      	beq.n	d5356 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5342:	e02a      	b.n	d539a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5344:	f1b8 0f00 	cmp.w	r8, #0
   d5348:	d027      	beq.n	d539a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d534a:	6971      	ldr	r1, [r6, #20]
   d534c:	4638      	mov	r0, r7
   d534e:	3104      	adds	r1, #4
   d5350:	f7ff fec1 	bl	d50d6 <_ZN9IPAddressaSEPKh>
   d5354:	e020      	b.n	d5398 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5356:	f1b9 0f00 	cmp.w	r9, #0
   d535a:	d01e      	beq.n	d539a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d535c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d535e:	2211      	movs	r2, #17
   d5360:	a801      	add	r0, sp, #4
   d5362:	f001 fc62 	bl	d6c2a <memset>
                    a.v = 6;
   d5366:	2306      	movs	r3, #6
   d5368:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d536c:	ad01      	add	r5, sp, #4
   d536e:	f104 0308 	add.w	r3, r4, #8
   d5372:	3418      	adds	r4, #24
   d5374:	6818      	ldr	r0, [r3, #0]
   d5376:	6859      	ldr	r1, [r3, #4]
   d5378:	462a      	mov	r2, r5
   d537a:	c203      	stmia	r2!, {r0, r1}
   d537c:	3308      	adds	r3, #8
   d537e:	42a3      	cmp	r3, r4
   d5380:	4615      	mov	r5, r2
   d5382:	d1f7      	bne.n	d5374 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5384:	a901      	add	r1, sp, #4
   d5386:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5388:	ad07      	add	r5, sp, #28
   d538a:	f7ff fe85 	bl	d5098 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d538e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5390:	1d3c      	adds	r4, r7, #4
   d5392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5394:	682b      	ldr	r3, [r5, #0]
   d5396:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5398:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d539a:	69f6      	ldr	r6, [r6, #28]
   d539c:	e7c8      	b.n	d5330 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d539e:	9800      	ldr	r0, [sp, #0]
   d53a0:	f7ff f918 	bl	d45d4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d53a4:	4638      	mov	r0, r7
   d53a6:	b015      	add	sp, #84	; 0x54
   d53a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d53ac <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d53ac:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d53ae:	4a03      	ldr	r2, [pc, #12]	; (d53bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d53b0:	601a      	str	r2, [r3, #0]
   d53b2:	2200      	movs	r2, #0
   d53b4:	605a      	str	r2, [r3, #4]
   d53b6:	4770      	bx	lr
   d53b8:	2003e5b4 	.word	0x2003e5b4
   d53bc:	000d6ed0 	.word	0x000d6ed0

000d53c0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d53c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53c2:	4606      	mov	r6, r0
   d53c4:	460d      	mov	r5, r1
   d53c6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d53c8:	2400      	movs	r4, #0
  while (size--) {
   d53ca:	42bd      	cmp	r5, r7
   d53cc:	d00c      	beq.n	d53e8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d53ce:	6833      	ldr	r3, [r6, #0]
   d53d0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d53d4:	689b      	ldr	r3, [r3, #8]
   d53d6:	4630      	mov	r0, r6
   d53d8:	4798      	blx	r3
     if (chunk>=0)
   d53da:	2800      	cmp	r0, #0
   d53dc:	db01      	blt.n	d53e2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d53de:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d53e0:	e7f3      	b.n	d53ca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d53e2:	2c00      	cmp	r4, #0
   d53e4:	bf08      	it	eq
   d53e6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d53e8:	4620      	mov	r0, r4
   d53ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53ec <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d53ec:	b570      	push	{r4, r5, r6, lr}
   d53ee:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d53f0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d53f2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d53f4:	b149      	cbz	r1, d540a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d53f6:	f001 fc6c 	bl	d6cd2 <strlen>
   d53fa:	682b      	ldr	r3, [r5, #0]
   d53fc:	4602      	mov	r2, r0
   d53fe:	4621      	mov	r1, r4
   d5400:	4628      	mov	r0, r5
   d5402:	68db      	ldr	r3, [r3, #12]
    }
   d5404:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5408:	4718      	bx	r3
    }
   d540a:	bd70      	pop	{r4, r5, r6, pc}

000d540c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d540c:	6803      	ldr	r3, [r0, #0]
   d540e:	689b      	ldr	r3, [r3, #8]
   d5410:	4718      	bx	r3

000d5412 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5412:	b530      	push	{r4, r5, lr}
   d5414:	b08b      	sub	sp, #44	; 0x2c
   d5416:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5418:	2100      	movs	r1, #0
   d541a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d541e:	2a01      	cmp	r2, #1
   d5420:	bf98      	it	ls
   d5422:	220a      	movls	r2, #10
   d5424:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5428:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d542c:	fb05 3312 	mls	r3, r5, r2, r3
   d5430:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5434:	2b09      	cmp	r3, #9
   d5436:	bf94      	ite	ls
   d5438:	3330      	addls	r3, #48	; 0x30
   d543a:	3337      	addhi	r3, #55	; 0x37
   d543c:	b2db      	uxtb	r3, r3
   d543e:	4621      	mov	r1, r4
   d5440:	f804 3901 	strb.w	r3, [r4], #-1
   d5444:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5446:	2d00      	cmp	r5, #0
   d5448:	d1ee      	bne.n	d5428 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d544a:	f7ff ffcf 	bl	d53ec <_ZN5Print5writeEPKc>
}
   d544e:	b00b      	add	sp, #44	; 0x2c
   d5450:	bd30      	pop	{r4, r5, pc}

000d5452 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5452:	b510      	push	{r4, lr}
   d5454:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5456:	f7ff fa86 	bl	d4966 <_ZNSt14_Function_baseD1Ev>
   d545a:	4620      	mov	r0, r4
   d545c:	bd10      	pop	{r4, pc}
	...

000d5460 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5460:	4803      	ldr	r0, [pc, #12]	; (d5470 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5462:	4a04      	ldr	r2, [pc, #16]	; (d5474 <_GLOBAL__sub_I_RGB+0x14>)
   d5464:	4904      	ldr	r1, [pc, #16]	; (d5478 <_GLOBAL__sub_I_RGB+0x18>)
   d5466:	2300      	movs	r3, #0
   d5468:	6083      	str	r3, [r0, #8]
   d546a:	f000 bc37 	b.w	d5cdc <__aeabi_atexit>
   d546e:	bf00      	nop
   d5470:	2003e5bc 	.word	0x2003e5bc
   d5474:	2003e390 	.word	0x2003e390
   d5478:	000d5453 	.word	0x000d5453

000d547c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d547c:	b510      	push	{r4, lr}
   d547e:	4604      	mov	r4, r0
{
    _spi = spi;
   d5480:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d5482:	4608      	mov	r0, r1
   d5484:	f7ff f8b6 	bl	d45f4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5488:	2300      	movs	r3, #0
   d548a:	6063      	str	r3, [r4, #4]
}
   d548c:	4620      	mov	r0, r4
   d548e:	bd10      	pop	{r4, pc}

000d5490 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5490:	7800      	ldrb	r0, [r0, #0]
   d5492:	f7ff b8b7 	b.w	d4604 <HAL_SPI_Is_Enabled>
	...

000d5498 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d5498:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d549c:	ec59 8b10 	vmov	r8, r9, d0
   d54a0:	4607      	mov	r7, r0
   d54a2:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d54a4:	2200      	movs	r2, #0
   d54a6:	2300      	movs	r3, #0
   d54a8:	ee10 0a10 	vmov	r0, s0
   d54ac:	4649      	mov	r1, r9
   d54ae:	f001 f9ab 	bl	d6808 <__aeabi_dcmplt>
   d54b2:	b128      	cbz	r0, d54c0 <_Z4dtoadhPc+0x28>
        val = -val;
   d54b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d54b8:	4699      	mov	r9, r3
        *sout++ = '-';
   d54ba:	232d      	movs	r3, #45	; 0x2d
   d54bc:	7033      	strb	r3, [r6, #0]
   d54be:	3601      	adds	r6, #1
   d54c0:	2300      	movs	r3, #0
    }
    long scale = 1;
   d54c2:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d54c4:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d54c6:	b2d9      	uxtb	r1, r3
   d54c8:	428f      	cmp	r7, r1
   d54ca:	d902      	bls.n	d54d2 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d54cc:	4354      	muls	r4, r2
   d54ce:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d54d0:	e7f9      	b.n	d54c6 <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d54d2:	4620      	mov	r0, r4
   d54d4:	f000 fec0 	bl	d6258 <__aeabi_i2d>
   d54d8:	4642      	mov	r2, r8
   d54da:	464b      	mov	r3, r9
   d54dc:	f000 ff22 	bl	d6324 <__aeabi_dmul>
   d54e0:	4682      	mov	sl, r0
   d54e2:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d54e4:	f001 f9f0 	bl	d68c8 <__aeabi_d2ulz>
   d54e8:	4680      	mov	r8, r0
   d54ea:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d54ec:	f000 fee4 	bl	d62b8 <__aeabi_ul2d>
   d54f0:	4602      	mov	r2, r0
   d54f2:	460b      	mov	r3, r1
   d54f4:	4650      	mov	r0, sl
   d54f6:	4659      	mov	r1, fp
   d54f8:	f000 fd60 	bl	d5fbc <__aeabi_dsub>
   d54fc:	2200      	movs	r2, #0
   d54fe:	4b17      	ldr	r3, [pc, #92]	; (d555c <_Z4dtoadhPc+0xc4>)
   d5500:	f001 f996 	bl	d6830 <__aeabi_dcmpge>
   d5504:	b118      	cbz	r0, d550e <_Z4dtoadhPc+0x76>
        fixed++;
   d5506:	f118 0801 	adds.w	r8, r8, #1
   d550a:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d550e:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d5510:	4622      	mov	r2, r4
   d5512:	462b      	mov	r3, r5
   d5514:	4640      	mov	r0, r8
   d5516:	4649      	mov	r1, r9
   d5518:	f001 f9be 	bl	d6898 <__aeabi_uldivmod>
   d551c:	2301      	movs	r3, #1
   d551e:	220a      	movs	r2, #10
   d5520:	4631      	mov	r1, r6
   d5522:	f000 faa2 	bl	d5a6a <ultoa>
    if (prec) {
   d5526:	b1af      	cbz	r7, d5554 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d5528:	4630      	mov	r0, r6
   d552a:	f001 fbd2 	bl	d6cd2 <strlen>
        *sout++ = '.';
   d552e:	232e      	movs	r3, #46	; 0x2e
   d5530:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d5532:	3001      	adds	r0, #1
   d5534:	4406      	add	r6, r0
   d5536:	4622      	mov	r2, r4
   d5538:	462b      	mov	r3, r5
   d553a:	4640      	mov	r0, r8
   d553c:	4649      	mov	r1, r9
   d553e:	f001 f9ab 	bl	d6898 <__aeabi_uldivmod>
   d5542:	463b      	mov	r3, r7
   d5544:	4610      	mov	r0, r2
   d5546:	4631      	mov	r1, r6
   d5548:	220a      	movs	r2, #10
    }
}
   d554a:	b001      	add	sp, #4
   d554c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d5550:	f000 ba8b 	b.w	d5a6a <ultoa>
    }
}
   d5554:	b001      	add	sp, #4
   d5556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d555a:	bf00      	nop
   d555c:	3fe00000 	.word	0x3fe00000

000d5560 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5560:	b510      	push	{r4, lr}
   d5562:	4604      	mov	r4, r0
{
	free(buffer);
   d5564:	6800      	ldr	r0, [r0, #0]
   d5566:	f7ff f979 	bl	d485c <free>
}
   d556a:	4620      	mov	r0, r4
   d556c:	bd10      	pop	{r4, pc}

000d556e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d556e:	b510      	push	{r4, lr}
   d5570:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5572:	6800      	ldr	r0, [r0, #0]
   d5574:	b108      	cbz	r0, d557a <_ZN6String10invalidateEv+0xc>
   d5576:	f7ff f971 	bl	d485c <free>
	buffer = NULL;
   d557a:	2300      	movs	r3, #0
   d557c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d557e:	60a3      	str	r3, [r4, #8]
   d5580:	6063      	str	r3, [r4, #4]
   d5582:	bd10      	pop	{r4, pc}

000d5584 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5584:	b538      	push	{r3, r4, r5, lr}
   d5586:	4604      	mov	r4, r0
   d5588:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d558a:	6800      	ldr	r0, [r0, #0]
   d558c:	3101      	adds	r1, #1
   d558e:	f7ff f96d 	bl	d486c <realloc>
	if (newbuffer) {
   d5592:	b110      	cbz	r0, d559a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5594:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5598:	2001      	movs	r0, #1
	}
	return 0;
}
   d559a:	bd38      	pop	{r3, r4, r5, pc}

000d559c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d559c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d559e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d55a0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d55a2:	b113      	cbz	r3, d55aa <_ZN6String7reserveEj+0xe>
   d55a4:	6843      	ldr	r3, [r0, #4]
   d55a6:	428b      	cmp	r3, r1
   d55a8:	d207      	bcs.n	d55ba <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d55aa:	4620      	mov	r0, r4
   d55ac:	f7ff ffea 	bl	d5584 <_ZN6String12changeBufferEj>
   d55b0:	b120      	cbz	r0, d55bc <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d55b2:	68a3      	ldr	r3, [r4, #8]
   d55b4:	b90b      	cbnz	r3, d55ba <_ZN6String7reserveEj+0x1e>
   d55b6:	6822      	ldr	r2, [r4, #0]
   d55b8:	7013      	strb	r3, [r2, #0]
   d55ba:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d55bc:	bd10      	pop	{r4, pc}

000d55be <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d55be:	b570      	push	{r4, r5, r6, lr}
   d55c0:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d55c2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d55c4:	4604      	mov	r4, r0
   d55c6:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d55c8:	f7ff ffe8 	bl	d559c <_ZN6String7reserveEj>
   d55cc:	b918      	cbnz	r0, d55d6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d55ce:	4620      	mov	r0, r4
   d55d0:	f7ff ffcd 	bl	d556e <_ZN6String10invalidateEv>
		return *this;
   d55d4:	e009      	b.n	d55ea <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d55d6:	462a      	mov	r2, r5
   d55d8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d55da:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d55dc:	6820      	ldr	r0, [r4, #0]
   d55de:	f001 fb19 	bl	d6c14 <memcpy>
	buffer[len] = 0;
   d55e2:	6822      	ldr	r2, [r4, #0]
   d55e4:	68a3      	ldr	r3, [r4, #8]
   d55e6:	2100      	movs	r1, #0
   d55e8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d55ea:	4620      	mov	r0, r4
   d55ec:	bd70      	pop	{r4, r5, r6, pc}

000d55ee <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d55ee:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d55f0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d55f2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d55f4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d55f6:	6043      	str	r3, [r0, #4]
	len = 0;
   d55f8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d55fa:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d55fc:	460d      	mov	r5, r1
   d55fe:	b139      	cbz	r1, d5610 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5600:	4608      	mov	r0, r1
   d5602:	f001 fb66 	bl	d6cd2 <strlen>
   d5606:	4629      	mov	r1, r5
   d5608:	4602      	mov	r2, r0
   d560a:	4620      	mov	r0, r4
   d560c:	f7ff ffd7 	bl	d55be <_ZN6String4copyEPKcj>
}
   d5610:	4620      	mov	r0, r4
   d5612:	bd38      	pop	{r3, r4, r5, pc}

000d5614 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5614:	b538      	push	{r3, r4, r5, lr}
   d5616:	4605      	mov	r5, r0
	if (buffer) {
   d5618:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d561a:	460c      	mov	r4, r1
	if (buffer) {
   d561c:	b160      	cbz	r0, d5638 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d561e:	686a      	ldr	r2, [r5, #4]
   d5620:	688b      	ldr	r3, [r1, #8]
   d5622:	429a      	cmp	r2, r3
   d5624:	d306      	bcc.n	d5634 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d5626:	6809      	ldr	r1, [r1, #0]
   d5628:	f001 fb30 	bl	d6c8c <strcpy>
			len = rhs.len;
   d562c:	68a3      	ldr	r3, [r4, #8]
   d562e:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5630:	2300      	movs	r3, #0
   d5632:	e00a      	b.n	d564a <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d5634:	f7ff f912 	bl	d485c <free>
		}
	}
	buffer = rhs.buffer;
   d5638:	6823      	ldr	r3, [r4, #0]
   d563a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d563c:	6863      	ldr	r3, [r4, #4]
   d563e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5640:	68a3      	ldr	r3, [r4, #8]
   d5642:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5644:	2300      	movs	r3, #0
   d5646:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d5648:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d564a:	60a3      	str	r3, [r4, #8]
   d564c:	bd38      	pop	{r3, r4, r5, pc}

000d564e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d564e:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5650:	b510      	push	{r4, lr}
   d5652:	460b      	mov	r3, r1
   d5654:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5656:	d007      	beq.n	d5668 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5658:	6809      	ldr	r1, [r1, #0]
   d565a:	b119      	cbz	r1, d5664 <_ZN6StringaSERKS_+0x16>
   d565c:	689a      	ldr	r2, [r3, #8]
   d565e:	f7ff ffae 	bl	d55be <_ZN6String4copyEPKcj>
   d5662:	e001      	b.n	d5668 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5664:	f7ff ff83 	bl	d556e <_ZN6String10invalidateEv>

	return *this;
}
   d5668:	4620      	mov	r0, r4
   d566a:	bd10      	pop	{r4, pc}

000d566c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d566c:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d566e:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5670:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5672:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5674:	6043      	str	r3, [r0, #4]
	len = 0;
   d5676:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5678:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d567a:	f7ff ffe8 	bl	d564e <_ZN6StringaSERKS_>
}
   d567e:	4620      	mov	r0, r4
   d5680:	bd10      	pop	{r4, pc}

000d5682 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d5682:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d5684:	b510      	push	{r4, lr}
   d5686:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5688:	d001      	beq.n	d568e <_ZN6StringaSEOS_+0xc>
   d568a:	f7ff ffc3 	bl	d5614 <_ZN6String4moveERS_>
	return *this;
}
   d568e:	4620      	mov	r0, r4
   d5690:	bd10      	pop	{r4, pc}

000d5692 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5692:	b538      	push	{r3, r4, r5, lr}
   d5694:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5696:	460c      	mov	r4, r1
   d5698:	b141      	cbz	r1, d56ac <_ZN6StringaSEPKc+0x1a>
   d569a:	4608      	mov	r0, r1
   d569c:	f001 fb19 	bl	d6cd2 <strlen>
   d56a0:	4621      	mov	r1, r4
   d56a2:	4602      	mov	r2, r0
   d56a4:	4628      	mov	r0, r5
   d56a6:	f7ff ff8a 	bl	d55be <_ZN6String4copyEPKcj>
   d56aa:	e001      	b.n	d56b0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d56ac:	f7ff ff5f 	bl	d556e <_ZN6String10invalidateEv>

	return *this;
}
   d56b0:	4628      	mov	r0, r5
   d56b2:	bd38      	pop	{r3, r4, r5, pc}

000d56b4 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d56b4:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d56b6:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d56b8:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d56ba:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d56bc:	6043      	str	r3, [r0, #4]
	len = 0;
   d56be:	6083      	str	r3, [r0, #8]
	flags = 0;
   d56c0:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d56c2:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d56c4:	ee10 0a10 	vmov	r0, s0
   d56c8:	b2cd      	uxtb	r5, r1
   d56ca:	f000 fdd7 	bl	d627c <__aeabi_f2d>
   d56ce:	ec41 0b10 	vmov	d0, r0, r1
   d56d2:	a901      	add	r1, sp, #4
   d56d4:	4628      	mov	r0, r5
   d56d6:	f7ff fedf 	bl	d5498 <_Z4dtoadhPc>
        *this = buf;
   d56da:	a901      	add	r1, sp, #4
   d56dc:	4620      	mov	r0, r4
   d56de:	f7ff ffd8 	bl	d5692 <_ZN6StringaSEPKc>
}
   d56e2:	4620      	mov	r0, r4
   d56e4:	b00b      	add	sp, #44	; 0x2c
   d56e6:	bd30      	pop	{r4, r5, pc}

000d56e8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d56e8:	b570      	push	{r4, r5, r6, lr}
   d56ea:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d56ec:	460e      	mov	r6, r1
   d56ee:	b909      	cbnz	r1, d56f4 <_ZN6String6concatEPKcj+0xc>
   d56f0:	2000      	movs	r0, #0
   d56f2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d56f4:	b16a      	cbz	r2, d5712 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d56f6:	6883      	ldr	r3, [r0, #8]
   d56f8:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d56fa:	4629      	mov	r1, r5
   d56fc:	f7ff ff4e 	bl	d559c <_ZN6String7reserveEj>
   d5700:	2800      	cmp	r0, #0
   d5702:	d0f5      	beq.n	d56f0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5704:	6820      	ldr	r0, [r4, #0]
   d5706:	68a3      	ldr	r3, [r4, #8]
   d5708:	4631      	mov	r1, r6
   d570a:	4418      	add	r0, r3
   d570c:	f001 fabe 	bl	d6c8c <strcpy>
	len = newlen;
   d5710:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5712:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5714:	bd70      	pop	{r4, r5, r6, pc}

000d5716 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5716:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5718:	688a      	ldr	r2, [r1, #8]
   d571a:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d571c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d571e:	f7ff ffe3 	bl	d56e8 <_ZN6String6concatEPKcj>
   d5722:	b910      	cbnz	r0, d572a <_ZplRK15StringSumHelperRK6String+0x14>
   d5724:	4620      	mov	r0, r4
   d5726:	f7ff ff22 	bl	d556e <_ZN6String10invalidateEv>
	return a;
}
   d572a:	4620      	mov	r0, r4
   d572c:	bd10      	pop	{r4, pc}

000d572e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d572e:	b538      	push	{r3, r4, r5, lr}
   d5730:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d5732:	460d      	mov	r5, r1
   d5734:	b141      	cbz	r1, d5748 <_ZplRK15StringSumHelperPKc+0x1a>
   d5736:	4608      	mov	r0, r1
   d5738:	f001 facb 	bl	d6cd2 <strlen>
   d573c:	4629      	mov	r1, r5
   d573e:	4602      	mov	r2, r0
   d5740:	4620      	mov	r0, r4
   d5742:	f7ff ffd1 	bl	d56e8 <_ZN6String6concatEPKcj>
   d5746:	b910      	cbnz	r0, d574e <_ZplRK15StringSumHelperPKc+0x20>
   d5748:	4620      	mov	r0, r4
   d574a:	f7ff ff10 	bl	d556e <_ZN6String10invalidateEv>
	return a;
}
   d574e:	4620      	mov	r0, r4
   d5750:	bd38      	pop	{r3, r4, r5, pc}

000d5752 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5752:	b510      	push	{r4, lr}
   d5754:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5756:	6800      	ldr	r0, [r0, #0]
   d5758:	b118      	cbz	r0, d5762 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d575a:	f7ff f87f 	bl	d485c <free>
            wakeupSource_ = nullptr;
   d575e:	2300      	movs	r3, #0
   d5760:	6023      	str	r3, [r4, #0]
   d5762:	bd10      	pop	{r4, pc}

000d5764 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5764:	b510      	push	{r4, lr}
   d5766:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5768:	f7ff fff3 	bl	d5752 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d576c:	4620      	mov	r0, r4
   d576e:	bd10      	pop	{r4, pc}

000d5770 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5770:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5772:	4c09      	ldr	r4, [pc, #36]	; (d5798 <_GLOBAL__sub_I_System+0x28>)
   d5774:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5776:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d577a:	6020      	str	r0, [r4, #0]
   d577c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d577e:	71a0      	strb	r0, [r4, #6]
   d5780:	8120      	strh	r0, [r4, #8]
   d5782:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5784:	f7fe ffc6 	bl	d4714 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5788:	4620      	mov	r0, r4
   d578a:	4a04      	ldr	r2, [pc, #16]	; (d579c <_GLOBAL__sub_I_System+0x2c>)
   d578c:	4904      	ldr	r1, [pc, #16]	; (d57a0 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d578e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5792:	f000 baa3 	b.w	d5cdc <__aeabi_atexit>
   d5796:	bf00      	nop
   d5798:	2003e5cc 	.word	0x2003e5cc
   d579c:	2003e390 	.word	0x2003e390
   d57a0:	000d5765 	.word	0x000d5765

000d57a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d57a4:	4b02      	ldr	r3, [pc, #8]	; (d57b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d57a6:	681a      	ldr	r2, [r3, #0]
   d57a8:	4b02      	ldr	r3, [pc, #8]	; (d57b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d57aa:	601a      	str	r2, [r3, #0]
   d57ac:	4770      	bx	lr
   d57ae:	bf00      	nop
   d57b0:	2003e328 	.word	0x2003e328
   d57b4:	2003e5d8 	.word	0x2003e5d8

000d57b8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d57b8:	4770      	bx	lr

000d57ba <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d57ba:	7441      	strb	r1, [r0, #17]
   d57bc:	4770      	bx	lr

000d57be <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d57be:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d57c0:	7c00      	ldrb	r0, [r0, #16]
   d57c2:	f7fe ff5f 	bl	d4684 <HAL_USART_Available_Data_For_Write>
}
   d57c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d57ca:	bd08      	pop	{r3, pc}

000d57cc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d57cc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d57ce:	7c00      	ldrb	r0, [r0, #16]
   d57d0:	f7fe ff30 	bl	d4634 <HAL_USART_Available_Data>
}
   d57d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d57d8:	bd08      	pop	{r3, pc}

000d57da <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d57da:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d57dc:	7c00      	ldrb	r0, [r0, #16]
   d57de:	f7fe ff39 	bl	d4654 <HAL_USART_Peek_Data>
}
   d57e2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d57e6:	bf28      	it	cs
   d57e8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d57ec:	bd08      	pop	{r3, pc}

000d57ee <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d57ee:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d57f0:	7c00      	ldrb	r0, [r0, #16]
   d57f2:	f7fe ff27 	bl	d4644 <HAL_USART_Read_Data>
}
   d57f6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d57fa:	bf28      	it	cs
   d57fc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5800:	bd08      	pop	{r3, pc}

000d5802 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5802:	7c00      	ldrb	r0, [r0, #16]
   d5804:	f7fe bf2e 	b.w	d4664 <HAL_USART_Flush_Data>

000d5808 <_ZN11USARTSerialD0Ev>:
   d5808:	b510      	push	{r4, lr}
   d580a:	2114      	movs	r1, #20
   d580c:	4604      	mov	r4, r0
   d580e:	f000 fa6a 	bl	d5ce6 <_ZdlPvj>
   d5812:	4620      	mov	r0, r4
   d5814:	bd10      	pop	{r4, pc}

000d5816 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5816:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5818:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d581a:	4604      	mov	r4, r0
   d581c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d581e:	b925      	cbnz	r5, d582a <_ZN11USARTSerial5writeEh+0x14>
   d5820:	7c00      	ldrb	r0, [r0, #16]
   d5822:	f7fe ff2f 	bl	d4684 <HAL_USART_Available_Data_For_Write>
   d5826:	2800      	cmp	r0, #0
   d5828:	dd05      	ble.n	d5836 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d582a:	4631      	mov	r1, r6
   d582c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d582e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5832:	f7fe bef7 	b.w	d4624 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5836:	4628      	mov	r0, r5
   d5838:	bd70      	pop	{r4, r5, r6, pc}
	...

000d583c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d583c:	b510      	push	{r4, lr}
   d583e:	4604      	mov	r4, r0
   d5840:	4608      	mov	r0, r1
   d5842:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5844:	2200      	movs	r2, #0
   d5846:	6062      	str	r2, [r4, #4]
   d5848:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d584c:	60a2      	str	r2, [r4, #8]
   d584e:	4a05      	ldr	r2, [pc, #20]	; (d5864 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5850:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5852:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5854:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5856:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5858:	461a      	mov	r2, r3
   d585a:	f7fe fedb 	bl	d4614 <HAL_USART_Init>
}
   d585e:	4620      	mov	r0, r4
   d5860:	bd10      	pop	{r4, pc}
   d5862:	bf00      	nop
   d5864:	000d6f30 	.word	0x000d6f30

000d5868 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5868:	7c00      	ldrb	r0, [r0, #16]
   d586a:	f7fe bf03 	b.w	d4674 <HAL_USART_Is_Enabled>
	...

000d5870 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5870:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5872:	4d0c      	ldr	r5, [pc, #48]	; (d58a4 <_Z22__fetch_global_Serial1v+0x34>)
   d5874:	6829      	ldr	r1, [r5, #0]
   d5876:	f011 0401 	ands.w	r4, r1, #1
   d587a:	d111      	bne.n	d58a0 <_Z22__fetch_global_Serial1v+0x30>
   d587c:	4628      	mov	r0, r5
   d587e:	f7fe fc10 	bl	d40a2 <__cxa_guard_acquire>
   d5882:	b168      	cbz	r0, d58a0 <_Z22__fetch_global_Serial1v+0x30>
   d5884:	4a08      	ldr	r2, [pc, #32]	; (d58a8 <_Z22__fetch_global_Serial1v+0x38>)
   d5886:	4b09      	ldr	r3, [pc, #36]	; (d58ac <_Z22__fetch_global_Serial1v+0x3c>)
   d5888:	4809      	ldr	r0, [pc, #36]	; (d58b0 <_Z22__fetch_global_Serial1v+0x40>)
   d588a:	4621      	mov	r1, r4
   d588c:	f7ff ffd6 	bl	d583c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5890:	4628      	mov	r0, r5
   d5892:	f7fe fc0b 	bl	d40ac <__cxa_guard_release>
   d5896:	4a07      	ldr	r2, [pc, #28]	; (d58b4 <_Z22__fetch_global_Serial1v+0x44>)
   d5898:	4907      	ldr	r1, [pc, #28]	; (d58b8 <_Z22__fetch_global_Serial1v+0x48>)
   d589a:	4805      	ldr	r0, [pc, #20]	; (d58b0 <_Z22__fetch_global_Serial1v+0x40>)
   d589c:	f000 fa1e 	bl	d5cdc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d58a0:	4803      	ldr	r0, [pc, #12]	; (d58b0 <_Z22__fetch_global_Serial1v+0x40>)
   d58a2:	bd38      	pop	{r3, r4, r5, pc}
   d58a4:	2003e674 	.word	0x2003e674
   d58a8:	2003e678 	.word	0x2003e678
   d58ac:	2003e5f0 	.word	0x2003e5f0
   d58b0:	2003e5dc 	.word	0x2003e5dc
   d58b4:	2003e390 	.word	0x2003e390
   d58b8:	000d57b9 	.word	0x000d57b9

000d58bc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d58bc:	7441      	strb	r1, [r0, #17]
   d58be:	4770      	bx	lr

000d58c0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d58c0:	4770      	bx	lr

000d58c2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d58c2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d58c4:	2100      	movs	r1, #0
   d58c6:	7c00      	ldrb	r0, [r0, #16]
   d58c8:	f7fe ff04 	bl	d46d4 <HAL_USB_USART_Receive_Data>
}
   d58cc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d58d0:	bf28      	it	cs
   d58d2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d58d6:	bd08      	pop	{r3, pc}

000d58d8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d58d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d58da:	2101      	movs	r1, #1
   d58dc:	7c00      	ldrb	r0, [r0, #16]
   d58de:	f7fe fef9 	bl	d46d4 <HAL_USB_USART_Receive_Data>
}
   d58e2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d58e6:	bf28      	it	cs
   d58e8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d58ec:	bd08      	pop	{r3, pc}

000d58ee <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d58ee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d58f0:	7c00      	ldrb	r0, [r0, #16]
   d58f2:	f7fe fee7 	bl	d46c4 <HAL_USB_USART_Available_Data_For_Write>
}
   d58f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d58fa:	bd08      	pop	{r3, pc}

000d58fc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d58fc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d58fe:	7c00      	ldrb	r0, [r0, #16]
   d5900:	f7fe fed8 	bl	d46b4 <HAL_USB_USART_Available_Data>
}
   d5904:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5908:	bd08      	pop	{r3, pc}

000d590a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d590a:	7c00      	ldrb	r0, [r0, #16]
   d590c:	f7fe bef2 	b.w	d46f4 <HAL_USB_USART_Flush_Data>

000d5910 <_ZN9USBSerialD0Ev>:
   d5910:	b510      	push	{r4, lr}
   d5912:	2114      	movs	r1, #20
   d5914:	4604      	mov	r4, r0
   d5916:	f000 f9e6 	bl	d5ce6 <_ZdlPvj>
   d591a:	4620      	mov	r0, r4
   d591c:	bd10      	pop	{r4, pc}

000d591e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d591e:	b538      	push	{r3, r4, r5, lr}
   d5920:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5922:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5924:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5926:	f7fe fecd 	bl	d46c4 <HAL_USB_USART_Available_Data_For_Write>
   d592a:	2800      	cmp	r0, #0
   d592c:	dc01      	bgt.n	d5932 <_ZN9USBSerial5writeEh+0x14>
   d592e:	7c60      	ldrb	r0, [r4, #17]
   d5930:	b128      	cbz	r0, d593e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5932:	4629      	mov	r1, r5
   d5934:	7c20      	ldrb	r0, [r4, #16]
   d5936:	f7fe fed5 	bl	d46e4 <HAL_USB_USART_Send_Data>
   d593a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d593e:	bd38      	pop	{r3, r4, r5, pc}

000d5940 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5940:	b510      	push	{r4, lr}
   d5942:	4604      	mov	r4, r0
   d5944:	2300      	movs	r3, #0
   d5946:	6063      	str	r3, [r4, #4]
   d5948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d594c:	60a3      	str	r3, [r4, #8]
   d594e:	4b05      	ldr	r3, [pc, #20]	; (d5964 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5950:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5952:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5954:	4608      	mov	r0, r1
{
  _serial = serial;
   d5956:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5958:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d595a:	4611      	mov	r1, r2
   d595c:	f7fe fe9a 	bl	d4694 <HAL_USB_USART_Init>
}
   d5960:	4620      	mov	r0, r4
   d5962:	bd10      	pop	{r4, pc}
   d5964:	000d6f60 	.word	0x000d6f60

000d5968 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5968:	2200      	movs	r2, #0
   d596a:	7c00      	ldrb	r0, [r0, #16]
   d596c:	f7fe be9a 	b.w	d46a4 <HAL_USB_USART_Begin>

000d5970 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5970:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5972:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5974:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5976:	2100      	movs	r1, #0
   d5978:	f001 f957 	bl	d6c2a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d597c:	4620      	mov	r0, r4
   d597e:	bd10      	pop	{r4, pc}

000d5980 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5980:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5982:	4d0e      	ldr	r5, [pc, #56]	; (d59bc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5984:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5986:	a801      	add	r0, sp, #4
   d5988:	f7ff fff2 	bl	d5970 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d598c:	6829      	ldr	r1, [r5, #0]
   d598e:	f011 0401 	ands.w	r4, r1, #1
   d5992:	d110      	bne.n	d59b6 <_Z16_fetch_usbserialv+0x36>
   d5994:	4628      	mov	r0, r5
   d5996:	f7fe fb84 	bl	d40a2 <__cxa_guard_acquire>
   d599a:	b160      	cbz	r0, d59b6 <_Z16_fetch_usbserialv+0x36>
   d599c:	aa01      	add	r2, sp, #4
   d599e:	4621      	mov	r1, r4
   d59a0:	4807      	ldr	r0, [pc, #28]	; (d59c0 <_Z16_fetch_usbserialv+0x40>)
   d59a2:	f7ff ffcd 	bl	d5940 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d59a6:	4628      	mov	r0, r5
   d59a8:	f7fe fb80 	bl	d40ac <__cxa_guard_release>
   d59ac:	4a05      	ldr	r2, [pc, #20]	; (d59c4 <_Z16_fetch_usbserialv+0x44>)
   d59ae:	4906      	ldr	r1, [pc, #24]	; (d59c8 <_Z16_fetch_usbserialv+0x48>)
   d59b0:	4803      	ldr	r0, [pc, #12]	; (d59c0 <_Z16_fetch_usbserialv+0x40>)
   d59b2:	f000 f993 	bl	d5cdc <__aeabi_atexit>
	return _usbserial;
}
   d59b6:	4802      	ldr	r0, [pc, #8]	; (d59c0 <_Z16_fetch_usbserialv+0x40>)
   d59b8:	b007      	add	sp, #28
   d59ba:	bd30      	pop	{r4, r5, pc}
   d59bc:	2003e6fc 	.word	0x2003e6fc
   d59c0:	2003e700 	.word	0x2003e700
   d59c4:	2003e390 	.word	0x2003e390
   d59c8:	000d58c1 	.word	0x000d58c1

000d59cc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d59cc:	2200      	movs	r2, #0
   d59ce:	4611      	mov	r1, r2
   d59d0:	6840      	ldr	r0, [r0, #4]
   d59d2:	f7fe bf03 	b.w	d47dc <network_ready>

000d59d6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d59d6:	2200      	movs	r2, #0
   d59d8:	4611      	mov	r1, r2
   d59da:	6840      	ldr	r0, [r0, #4]
   d59dc:	f7fe bf1e 	b.w	d481c <network_listening>

000d59e0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d59e0:	2200      	movs	r2, #0
   d59e2:	4611      	mov	r1, r2
   d59e4:	6840      	ldr	r0, [r0, #4]
   d59e6:	f7fe bf29 	b.w	d483c <network_get_listen_timeout>

000d59ea <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d59ea:	2200      	movs	r2, #0
   d59ec:	6840      	ldr	r0, [r0, #4]
   d59ee:	f7fe bf1d 	b.w	d482c <network_set_listen_timeout>

000d59f2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d59f2:	2200      	movs	r2, #0
   d59f4:	f081 0101 	eor.w	r1, r1, #1
   d59f8:	6840      	ldr	r0, [r0, #4]
   d59fa:	f7fe bf07 	b.w	d480c <network_listen>

000d59fe <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d59fe:	2300      	movs	r3, #0
   d5a00:	461a      	mov	r2, r3
   d5a02:	4619      	mov	r1, r3
   d5a04:	6840      	ldr	r0, [r0, #4]
   d5a06:	f7fe bef9 	b.w	d47fc <network_off>

000d5a0a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5a0a:	2300      	movs	r3, #0
   d5a0c:	461a      	mov	r2, r3
   d5a0e:	4619      	mov	r1, r3
   d5a10:	6840      	ldr	r0, [r0, #4]
   d5a12:	f7fe beeb 	b.w	d47ec <network_on>

000d5a16 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5a16:	2200      	movs	r2, #0
   d5a18:	4611      	mov	r1, r2
   d5a1a:	6840      	ldr	r0, [r0, #4]
   d5a1c:	f7fe bece 	b.w	d47bc <network_connecting>

000d5a20 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a20:	2200      	movs	r2, #0
   d5a22:	2102      	movs	r1, #2
   d5a24:	6840      	ldr	r0, [r0, #4]
   d5a26:	f7fe bed1 	b.w	d47cc <network_disconnect>

000d5a2a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5a2a:	2300      	movs	r3, #0
   d5a2c:	461a      	mov	r2, r3
   d5a2e:	6840      	ldr	r0, [r0, #4]
   d5a30:	f7fe bebc 	b.w	d47ac <network_connect>

000d5a34 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5a34:	4b02      	ldr	r3, [pc, #8]	; (d5a40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5a36:	2204      	movs	r2, #4
   d5a38:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5a3a:	4a02      	ldr	r2, [pc, #8]	; (d5a44 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5a3c:	601a      	str	r2, [r3, #0]
   d5a3e:	4770      	bx	lr
   d5a40:	2003e714 	.word	0x2003e714
   d5a44:	000d6f90 	.word	0x000d6f90

000d5a48 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5a48:	b510      	push	{r4, lr}
   d5a4a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5a4c:	f001 f941 	bl	d6cd2 <strlen>
   d5a50:	3801      	subs	r0, #1
   d5a52:	1823      	adds	r3, r4, r0
   d5a54:	4620      	mov	r0, r4
	while(i<j){
   d5a56:	4298      	cmp	r0, r3
   d5a58:	d206      	bcs.n	d5a68 <_Z11str_reversePc+0x20>
		c = *i;
   d5a5a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5a5c:	7819      	ldrb	r1, [r3, #0]
   d5a5e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5a62:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d5a66:	e7f6      	b.n	d5a56 <_Z11str_reversePc+0xe>
   d5a68:	bd10      	pop	{r4, pc}

000d5a6a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5a6a:	b570      	push	{r4, r5, r6, lr}
   d5a6c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5a6e:	1e91      	subs	r1, r2, #2
   d5a70:	2922      	cmp	r1, #34	; 0x22
   d5a72:	d820      	bhi.n	d5ab6 <ultoa+0x4c>
   d5a74:	4625      	mov	r5, r4
   d5a76:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5a78:	b910      	cbnz	r0, d5a80 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5a7a:	4423      	add	r3, r4
            *ptr++ = '0';
   d5a7c:	2230      	movs	r2, #48	; 0x30
   d5a7e:	e00e      	b.n	d5a9e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5a80:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5a84:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d5a88:	b2c1      	uxtb	r1, r0
   d5a8a:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d5a8e:	2809      	cmp	r0, #9
                *ptr += '0';
   d5a90:	bf94      	ite	ls
   d5a92:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5a94:	3157      	addhi	r1, #87	; 0x57
   d5a96:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d5a9a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5a9c:	e7eb      	b.n	d5a76 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5a9e:	4299      	cmp	r1, r3
   d5aa0:	d202      	bcs.n	d5aa8 <ultoa+0x3e>
            *ptr++ = '0';
   d5aa2:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5aa6:	e7fa      	b.n	d5a9e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d5aa8:	2300      	movs	r3, #0
	str_reverse(buffer);
   d5aaa:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d5aac:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d5aae:	f7ff ffcb 	bl	d5a48 <_Z11str_reversePc>
	return buffer;
   d5ab2:	4620      	mov	r0, r4
   d5ab4:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d5ab6:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d5ab8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5abc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5abc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5abe:	4b0c      	ldr	r3, [pc, #48]	; (d5af0 <serialEventRun+0x34>)
   d5ac0:	b133      	cbz	r3, d5ad0 <serialEventRun+0x14>
   d5ac2:	f7ff ff5d 	bl	d5980 <_Z16_fetch_usbserialv>
   d5ac6:	6803      	ldr	r3, [r0, #0]
   d5ac8:	691b      	ldr	r3, [r3, #16]
   d5aca:	4798      	blx	r3
   d5acc:	2800      	cmp	r0, #0
   d5ace:	dc09      	bgt.n	d5ae4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5ad0:	4b08      	ldr	r3, [pc, #32]	; (d5af4 <serialEventRun+0x38>)
   d5ad2:	b163      	cbz	r3, d5aee <serialEventRun+0x32>
   d5ad4:	f7ff fecc 	bl	d5870 <_Z22__fetch_global_Serial1v>
   d5ad8:	6803      	ldr	r3, [r0, #0]
   d5ada:	691b      	ldr	r3, [r3, #16]
   d5adc:	4798      	blx	r3
   d5ade:	2800      	cmp	r0, #0
   d5ae0:	dc03      	bgt.n	d5aea <serialEventRun+0x2e>
   d5ae2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5ae4:	f3af 8000 	nop.w
   d5ae8:	e7f2      	b.n	d5ad0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5aea:	f3af 8000 	nop.w
   d5aee:	bd08      	pop	{r3, pc}
	...

000d5af8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5af8:	b508      	push	{r3, lr}
	serialEventRun();
   d5afa:	f7ff ffdf 	bl	d5abc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5afe:	f7fe fd01 	bl	d4504 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5b02:	4b01      	ldr	r3, [pc, #4]	; (d5b08 <_post_loop+0x10>)
   d5b04:	6018      	str	r0, [r3, #0]
   d5b06:	bd08      	pop	{r3, pc}
   d5b08:	2003e730 	.word	0x2003e730

000d5b0c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5b0c:	4802      	ldr	r0, [pc, #8]	; (d5b18 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5b0e:	4a03      	ldr	r2, [pc, #12]	; (d5b1c <_Z33system_initialize_user_backup_ramv+0x10>)
   d5b10:	4903      	ldr	r1, [pc, #12]	; (d5b20 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5b12:	1a12      	subs	r2, r2, r0
   d5b14:	f001 b87e 	b.w	d6c14 <memcpy>
   d5b18:	2003f400 	.word	0x2003f400
   d5b1c:	2003f404 	.word	0x2003f404
   d5b20:	000d7068 	.word	0x000d7068

000d5b24 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5b24:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5b26:	2300      	movs	r3, #0
   d5b28:	9300      	str	r3, [sp, #0]
   d5b2a:	461a      	mov	r2, r3
   d5b2c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5b30:	f7fe fe1a 	bl	d4768 <system_ctrl_set_result>
}
   d5b34:	b003      	add	sp, #12
   d5b36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5b3c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5b3c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5b3e:	8843      	ldrh	r3, [r0, #2]
   d5b40:	2b0a      	cmp	r3, #10
   d5b42:	d008      	beq.n	d5b56 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5b44:	2b50      	cmp	r3, #80	; 0x50
   d5b46:	d109      	bne.n	d5b5c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5b48:	4b09      	ldr	r3, [pc, #36]	; (d5b70 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5b4a:	681b      	ldr	r3, [r3, #0]
   d5b4c:	b13b      	cbz	r3, d5b5e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5b4e:	b003      	add	sp, #12
   d5b50:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5b54:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5b56:	f7ff ffe5 	bl	d5b24 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5b5a:	e006      	b.n	d5b6a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5b5c:	2300      	movs	r3, #0
   d5b5e:	9300      	str	r3, [sp, #0]
   d5b60:	461a      	mov	r2, r3
   d5b62:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5b66:	f7fe fdff 	bl	d4768 <system_ctrl_set_result>
        break;
    }
}
   d5b6a:	b003      	add	sp, #12
   d5b6c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5b70:	2003e71c 	.word	0x2003e71c

000d5b74 <module_user_init_hook>:

void module_user_init_hook()
{
   d5b74:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5b76:	4c10      	ldr	r4, [pc, #64]	; (d5bb8 <module_user_init_hook+0x44>)
   d5b78:	4d10      	ldr	r5, [pc, #64]	; (d5bbc <module_user_init_hook+0x48>)
   d5b7a:	6823      	ldr	r3, [r4, #0]
   d5b7c:	42ab      	cmp	r3, r5
   d5b7e:	4b10      	ldr	r3, [pc, #64]	; (d5bc0 <module_user_init_hook+0x4c>)
   d5b80:	bf0c      	ite	eq
   d5b82:	2201      	moveq	r2, #1
   d5b84:	2200      	movne	r2, #0
   d5b86:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5b88:	d002      	beq.n	d5b90 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5b8a:	f7ff ffbf 	bl	d5b0c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5b8e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5b90:	f7fe fca8 	bl	d44e4 <HAL_RNG_GetRandomNumber>
   d5b94:	4604      	mov	r4, r0
    srand(seed);
   d5b96:	f001 f851 	bl	d6c3c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5b9a:	4b0a      	ldr	r3, [pc, #40]	; (d5bc4 <module_user_init_hook+0x50>)
   d5b9c:	b113      	cbz	r3, d5ba4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5b9e:	4620      	mov	r0, r4
   d5ba0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5ba4:	2100      	movs	r1, #0
   d5ba6:	4807      	ldr	r0, [pc, #28]	; (d5bc4 <module_user_init_hook+0x50>)
   d5ba8:	f7fe fdf8 	bl	d479c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5bac:	2100      	movs	r1, #0
   d5bae:	4806      	ldr	r0, [pc, #24]	; (d5bc8 <module_user_init_hook+0x54>)
}
   d5bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5bb4:	f7fe bdce 	b.w	d4754 <system_ctrl_set_app_request_handler>
   d5bb8:	2003f400 	.word	0x2003f400
   d5bbc:	9a271c1e 	.word	0x9a271c1e
   d5bc0:	2003e720 	.word	0x2003e720
   d5bc4:	00000000 	.word	0x00000000
   d5bc8:	000d5b3d 	.word	0x000d5b3d

000d5bcc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5bcc:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5bce:	4e18      	ldr	r6, [pc, #96]	; (d5c30 <pinAvailable+0x64>)
   d5bd0:	6831      	ldr	r1, [r6, #0]
   d5bd2:	f011 0501 	ands.w	r5, r1, #1
   d5bd6:	4604      	mov	r4, r0
   d5bd8:	d10a      	bne.n	d5bf0 <pinAvailable+0x24>
   d5bda:	4630      	mov	r0, r6
   d5bdc:	f7fe fa61 	bl	d40a2 <__cxa_guard_acquire>
   d5be0:	b130      	cbz	r0, d5bf0 <pinAvailable+0x24>
   d5be2:	4629      	mov	r1, r5
   d5be4:	4813      	ldr	r0, [pc, #76]	; (d5c34 <pinAvailable+0x68>)
   d5be6:	f7ff fc49 	bl	d547c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5bea:	4630      	mov	r0, r6
   d5bec:	f7fe fa5e 	bl	d40ac <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d5bf0:	4810      	ldr	r0, [pc, #64]	; (d5c34 <pinAvailable+0x68>)
   d5bf2:	f7ff fc4d 	bl	d5490 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5bf6:	b128      	cbz	r0, d5c04 <pinAvailable+0x38>
   d5bf8:	f1a4 030b 	sub.w	r3, r4, #11
   d5bfc:	2b02      	cmp	r3, #2
   d5bfe:	d801      	bhi.n	d5c04 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d5c00:	2000      	movs	r0, #0
   d5c02:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5c04:	f000 f844 	bl	d5c90 <_Z19__fetch_global_Wirev>
   d5c08:	f7ff f9f6 	bl	d4ff8 <_ZN7TwoWire9isEnabledEv>
   d5c0c:	b108      	cbz	r0, d5c12 <pinAvailable+0x46>
   d5c0e:	2c01      	cmp	r4, #1
   d5c10:	d9f6      	bls.n	d5c00 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5c12:	f7ff fe2d 	bl	d5870 <_Z22__fetch_global_Serial1v>
   d5c16:	f7ff fe27 	bl	d5868 <_ZN11USARTSerial9isEnabledEv>
   d5c1a:	b118      	cbz	r0, d5c24 <pinAvailable+0x58>
   d5c1c:	f1a4 0309 	sub.w	r3, r4, #9
   d5c20:	2b01      	cmp	r3, #1
   d5c22:	d9ed      	bls.n	d5c00 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5c24:	2c23      	cmp	r4, #35	; 0x23
   d5c26:	bf8c      	ite	hi
   d5c28:	2000      	movhi	r0, #0
   d5c2a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5c2c:	bd70      	pop	{r4, r5, r6, pc}
   d5c2e:	bf00      	nop
   d5c30:	2003e724 	.word	0x2003e724
   d5c34:	2003e728 	.word	0x2003e728

000d5c38 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5c38:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5c3a:	b538      	push	{r3, r4, r5, lr}
   d5c3c:	4604      	mov	r4, r0
   d5c3e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5c40:	d80a      	bhi.n	d5c58 <pinMode+0x20>
   d5c42:	29ff      	cmp	r1, #255	; 0xff
   d5c44:	d008      	beq.n	d5c58 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5c46:	f7ff ffc1 	bl	d5bcc <pinAvailable>
   d5c4a:	b128      	cbz	r0, d5c58 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5c4c:	4629      	mov	r1, r5
   d5c4e:	4620      	mov	r0, r4
}
   d5c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5c54:	f7fe bc66 	b.w	d4524 <HAL_Pin_Mode>
   d5c58:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5c5c <_Z17acquireWireBufferv>:
   d5c5c:	b570      	push	{r4, r5, r6, lr}
   d5c5e:	4604      	mov	r4, r0
   d5c60:	2514      	movs	r5, #20
   d5c62:	462a      	mov	r2, r5
   d5c64:	4e09      	ldr	r6, [pc, #36]	; (d5c8c <_Z17acquireWireBufferv+0x30>)
   d5c66:	2100      	movs	r1, #0
   d5c68:	f000 ffdf 	bl	d6c2a <memset>
   d5c6c:	8025      	strh	r5, [r4, #0]
   d5c6e:	2520      	movs	r5, #32
   d5c70:	4631      	mov	r1, r6
   d5c72:	60a5      	str	r5, [r4, #8]
   d5c74:	6125      	str	r5, [r4, #16]
   d5c76:	4628      	mov	r0, r5
   d5c78:	f000 f84f 	bl	d5d1a <_ZnajRKSt9nothrow_t>
   d5c7c:	4631      	mov	r1, r6
   d5c7e:	6060      	str	r0, [r4, #4]
   d5c80:	4628      	mov	r0, r5
   d5c82:	f000 f84a 	bl	d5d1a <_ZnajRKSt9nothrow_t>
   d5c86:	60e0      	str	r0, [r4, #12]
   d5c88:	4620      	mov	r0, r4
   d5c8a:	bd70      	pop	{r4, r5, r6, pc}
   d5c8c:	000d6fbc 	.word	0x000d6fbc

000d5c90 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5c90:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5c92:	4d0e      	ldr	r5, [pc, #56]	; (d5ccc <_Z19__fetch_global_Wirev+0x3c>)
   d5c94:	6829      	ldr	r1, [r5, #0]
   d5c96:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5c9a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5c9c:	d113      	bne.n	d5cc6 <_Z19__fetch_global_Wirev+0x36>
   d5c9e:	4628      	mov	r0, r5
   d5ca0:	f7fe f9ff 	bl	d40a2 <__cxa_guard_acquire>
   d5ca4:	b178      	cbz	r0, d5cc6 <_Z19__fetch_global_Wirev+0x36>
   d5ca6:	a801      	add	r0, sp, #4
   d5ca8:	f7ff ffd8 	bl	d5c5c <_Z17acquireWireBufferv>
   d5cac:	aa01      	add	r2, sp, #4
   d5cae:	4621      	mov	r1, r4
   d5cb0:	4807      	ldr	r0, [pc, #28]	; (d5cd0 <_Z19__fetch_global_Wirev+0x40>)
   d5cb2:	f7ff f98f 	bl	d4fd4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5cb6:	4628      	mov	r0, r5
   d5cb8:	f7fe f9f8 	bl	d40ac <__cxa_guard_release>
   d5cbc:	4a05      	ldr	r2, [pc, #20]	; (d5cd4 <_Z19__fetch_global_Wirev+0x44>)
   d5cbe:	4906      	ldr	r1, [pc, #24]	; (d5cd8 <_Z19__fetch_global_Wirev+0x48>)
   d5cc0:	4803      	ldr	r0, [pc, #12]	; (d5cd0 <_Z19__fetch_global_Wirev+0x40>)
   d5cc2:	f000 f80b 	bl	d5cdc <__aeabi_atexit>
	return wire;
}
   d5cc6:	4802      	ldr	r0, [pc, #8]	; (d5cd0 <_Z19__fetch_global_Wirev+0x40>)
   d5cc8:	b007      	add	sp, #28
   d5cca:	bd30      	pop	{r4, r5, pc}
   d5ccc:	2003e734 	.word	0x2003e734
   d5cd0:	2003e738 	.word	0x2003e738
   d5cd4:	2003e390 	.word	0x2003e390
   d5cd8:	000d4f7d 	.word	0x000d4f7d

000d5cdc <__aeabi_atexit>:
   d5cdc:	460b      	mov	r3, r1
   d5cde:	4601      	mov	r1, r0
   d5ce0:	4618      	mov	r0, r3
   d5ce2:	f000 bf89 	b.w	d6bf8 <__cxa_atexit>

000d5ce6 <_ZdlPvj>:
   d5ce6:	f7fe b9d8 	b.w	d409a <_ZdlPv>
	...

000d5cec <_ZSt15get_new_handlerv>:
   d5cec:	4b02      	ldr	r3, [pc, #8]	; (d5cf8 <_ZSt15get_new_handlerv+0xc>)
   d5cee:	6818      	ldr	r0, [r3, #0]
   d5cf0:	f3bf 8f5f 	dmb	sy
   d5cf4:	4770      	bx	lr
   d5cf6:	bf00      	nop
   d5cf8:	2003e74c 	.word	0x2003e74c

000d5cfc <_ZnwjRKSt9nothrow_t>:
   d5cfc:	b510      	push	{r4, lr}
   d5cfe:	2800      	cmp	r0, #0
   d5d00:	bf14      	ite	ne
   d5d02:	4604      	movne	r4, r0
   d5d04:	2401      	moveq	r4, #1
   d5d06:	4620      	mov	r0, r4
   d5d08:	f7fe fda0 	bl	d484c <malloc>
   d5d0c:	b920      	cbnz	r0, d5d18 <_ZnwjRKSt9nothrow_t+0x1c>
   d5d0e:	f7ff ffed 	bl	d5cec <_ZSt15get_new_handlerv>
   d5d12:	b108      	cbz	r0, d5d18 <_ZnwjRKSt9nothrow_t+0x1c>
   d5d14:	4780      	blx	r0
   d5d16:	e7f6      	b.n	d5d06 <_ZnwjRKSt9nothrow_t+0xa>
   d5d18:	bd10      	pop	{r4, pc}

000d5d1a <_ZnajRKSt9nothrow_t>:
   d5d1a:	f7ff bfef 	b.w	d5cfc <_ZnwjRKSt9nothrow_t>

000d5d1e <_ZSt25__throw_bad_function_callv>:
   d5d1e:	b508      	push	{r3, lr}
   d5d20:	f7fe fdac 	bl	d487c <abort>

000d5d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5d24:	4b24      	ldr	r3, [pc, #144]	; (d5db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5d26:	681a      	ldr	r2, [r3, #0]
   d5d28:	07d0      	lsls	r0, r2, #31
   d5d2a:	bf5c      	itt	pl
   d5d2c:	2201      	movpl	r2, #1
   d5d2e:	601a      	strpl	r2, [r3, #0]
   d5d30:	4b22      	ldr	r3, [pc, #136]	; (d5dbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5d32:	681a      	ldr	r2, [r3, #0]
   d5d34:	07d1      	lsls	r1, r2, #31
   d5d36:	bf5c      	itt	pl
   d5d38:	2201      	movpl	r2, #1
   d5d3a:	601a      	strpl	r2, [r3, #0]
   d5d3c:	4b20      	ldr	r3, [pc, #128]	; (d5dc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5d3e:	681a      	ldr	r2, [r3, #0]
   d5d40:	07d2      	lsls	r2, r2, #31
   d5d42:	bf5c      	itt	pl
   d5d44:	2201      	movpl	r2, #1
   d5d46:	601a      	strpl	r2, [r3, #0]
   d5d48:	4b1e      	ldr	r3, [pc, #120]	; (d5dc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5d4a:	681a      	ldr	r2, [r3, #0]
   d5d4c:	07d0      	lsls	r0, r2, #31
   d5d4e:	bf5c      	itt	pl
   d5d50:	2201      	movpl	r2, #1
   d5d52:	601a      	strpl	r2, [r3, #0]
   d5d54:	4b1c      	ldr	r3, [pc, #112]	; (d5dc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5d56:	681a      	ldr	r2, [r3, #0]
   d5d58:	07d1      	lsls	r1, r2, #31
   d5d5a:	bf5c      	itt	pl
   d5d5c:	2201      	movpl	r2, #1
   d5d5e:	601a      	strpl	r2, [r3, #0]
   d5d60:	4b1a      	ldr	r3, [pc, #104]	; (d5dcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5d62:	681a      	ldr	r2, [r3, #0]
   d5d64:	07d2      	lsls	r2, r2, #31
   d5d66:	bf5c      	itt	pl
   d5d68:	2201      	movpl	r2, #1
   d5d6a:	601a      	strpl	r2, [r3, #0]
   d5d6c:	4b18      	ldr	r3, [pc, #96]	; (d5dd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5d6e:	681a      	ldr	r2, [r3, #0]
   d5d70:	07d0      	lsls	r0, r2, #31
   d5d72:	bf5c      	itt	pl
   d5d74:	2201      	movpl	r2, #1
   d5d76:	601a      	strpl	r2, [r3, #0]
   d5d78:	4b16      	ldr	r3, [pc, #88]	; (d5dd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5d7a:	681a      	ldr	r2, [r3, #0]
   d5d7c:	07d1      	lsls	r1, r2, #31
   d5d7e:	bf5c      	itt	pl
   d5d80:	2201      	movpl	r2, #1
   d5d82:	601a      	strpl	r2, [r3, #0]
   d5d84:	4b14      	ldr	r3, [pc, #80]	; (d5dd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5d86:	681a      	ldr	r2, [r3, #0]
   d5d88:	07d2      	lsls	r2, r2, #31
   d5d8a:	bf5c      	itt	pl
   d5d8c:	2201      	movpl	r2, #1
   d5d8e:	601a      	strpl	r2, [r3, #0]
   d5d90:	4b12      	ldr	r3, [pc, #72]	; (d5ddc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5d92:	681a      	ldr	r2, [r3, #0]
   d5d94:	07d0      	lsls	r0, r2, #31
   d5d96:	bf5c      	itt	pl
   d5d98:	2201      	movpl	r2, #1
   d5d9a:	601a      	strpl	r2, [r3, #0]
   d5d9c:	4b10      	ldr	r3, [pc, #64]	; (d5de0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5d9e:	681a      	ldr	r2, [r3, #0]
   d5da0:	07d1      	lsls	r1, r2, #31
   d5da2:	bf5c      	itt	pl
   d5da4:	2201      	movpl	r2, #1
   d5da6:	601a      	strpl	r2, [r3, #0]
   d5da8:	4b0e      	ldr	r3, [pc, #56]	; (d5de4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5daa:	681a      	ldr	r2, [r3, #0]
   d5dac:	07d2      	lsls	r2, r2, #31
   d5dae:	bf5c      	itt	pl
   d5db0:	2201      	movpl	r2, #1
   d5db2:	601a      	strpl	r2, [r3, #0]
   d5db4:	4770      	bx	lr
   d5db6:	bf00      	nop
   d5db8:	2003e77c 	.word	0x2003e77c
   d5dbc:	2003e778 	.word	0x2003e778
   d5dc0:	2003e774 	.word	0x2003e774
   d5dc4:	2003e770 	.word	0x2003e770
   d5dc8:	2003e76c 	.word	0x2003e76c
   d5dcc:	2003e768 	.word	0x2003e768
   d5dd0:	2003e764 	.word	0x2003e764
   d5dd4:	2003e760 	.word	0x2003e760
   d5dd8:	2003e75c 	.word	0x2003e75c
   d5ddc:	2003e758 	.word	0x2003e758
   d5de0:	2003e754 	.word	0x2003e754
   d5de4:	2003e750 	.word	0x2003e750

000d5de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5de8:	4b18      	ldr	r3, [pc, #96]	; (d5e4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5dea:	681a      	ldr	r2, [r3, #0]
   d5dec:	07d1      	lsls	r1, r2, #31
   d5dee:	bf5c      	itt	pl
   d5df0:	2201      	movpl	r2, #1
   d5df2:	601a      	strpl	r2, [r3, #0]
   d5df4:	4b16      	ldr	r3, [pc, #88]	; (d5e50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5df6:	681a      	ldr	r2, [r3, #0]
   d5df8:	07d2      	lsls	r2, r2, #31
   d5dfa:	bf5c      	itt	pl
   d5dfc:	2201      	movpl	r2, #1
   d5dfe:	601a      	strpl	r2, [r3, #0]
   d5e00:	4b14      	ldr	r3, [pc, #80]	; (d5e54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5e02:	681a      	ldr	r2, [r3, #0]
   d5e04:	07d0      	lsls	r0, r2, #31
   d5e06:	bf5c      	itt	pl
   d5e08:	2201      	movpl	r2, #1
   d5e0a:	601a      	strpl	r2, [r3, #0]
   d5e0c:	4b12      	ldr	r3, [pc, #72]	; (d5e58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5e0e:	681a      	ldr	r2, [r3, #0]
   d5e10:	07d1      	lsls	r1, r2, #31
   d5e12:	bf5c      	itt	pl
   d5e14:	2201      	movpl	r2, #1
   d5e16:	601a      	strpl	r2, [r3, #0]
   d5e18:	4b10      	ldr	r3, [pc, #64]	; (d5e5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5e1a:	681a      	ldr	r2, [r3, #0]
   d5e1c:	07d2      	lsls	r2, r2, #31
   d5e1e:	bf5c      	itt	pl
   d5e20:	2201      	movpl	r2, #1
   d5e22:	601a      	strpl	r2, [r3, #0]
   d5e24:	4b0e      	ldr	r3, [pc, #56]	; (d5e60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5e26:	681a      	ldr	r2, [r3, #0]
   d5e28:	07d0      	lsls	r0, r2, #31
   d5e2a:	bf5c      	itt	pl
   d5e2c:	2201      	movpl	r2, #1
   d5e2e:	601a      	strpl	r2, [r3, #0]
   d5e30:	4b0c      	ldr	r3, [pc, #48]	; (d5e64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5e32:	681a      	ldr	r2, [r3, #0]
   d5e34:	07d1      	lsls	r1, r2, #31
   d5e36:	bf5c      	itt	pl
   d5e38:	2201      	movpl	r2, #1
   d5e3a:	601a      	strpl	r2, [r3, #0]
   d5e3c:	4b0a      	ldr	r3, [pc, #40]	; (d5e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5e3e:	681a      	ldr	r2, [r3, #0]
   d5e40:	07d2      	lsls	r2, r2, #31
   d5e42:	bf5c      	itt	pl
   d5e44:	2201      	movpl	r2, #1
   d5e46:	601a      	strpl	r2, [r3, #0]
   d5e48:	4770      	bx	lr
   d5e4a:	bf00      	nop
   d5e4c:	2003e79c 	.word	0x2003e79c
   d5e50:	2003e798 	.word	0x2003e798
   d5e54:	2003e794 	.word	0x2003e794
   d5e58:	2003e790 	.word	0x2003e790
   d5e5c:	2003e78c 	.word	0x2003e78c
   d5e60:	2003e788 	.word	0x2003e788
   d5e64:	2003e784 	.word	0x2003e784
   d5e68:	2003e780 	.word	0x2003e780

000d5e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5e6c:	4b18      	ldr	r3, [pc, #96]	; (d5ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5e6e:	681a      	ldr	r2, [r3, #0]
   d5e70:	07d1      	lsls	r1, r2, #31
   d5e72:	bf5c      	itt	pl
   d5e74:	2201      	movpl	r2, #1
   d5e76:	601a      	strpl	r2, [r3, #0]
   d5e78:	4b16      	ldr	r3, [pc, #88]	; (d5ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5e7a:	681a      	ldr	r2, [r3, #0]
   d5e7c:	07d2      	lsls	r2, r2, #31
   d5e7e:	bf5c      	itt	pl
   d5e80:	2201      	movpl	r2, #1
   d5e82:	601a      	strpl	r2, [r3, #0]
   d5e84:	4b14      	ldr	r3, [pc, #80]	; (d5ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5e86:	681a      	ldr	r2, [r3, #0]
   d5e88:	07d0      	lsls	r0, r2, #31
   d5e8a:	bf5c      	itt	pl
   d5e8c:	2201      	movpl	r2, #1
   d5e8e:	601a      	strpl	r2, [r3, #0]
   d5e90:	4b12      	ldr	r3, [pc, #72]	; (d5edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5e92:	681a      	ldr	r2, [r3, #0]
   d5e94:	07d1      	lsls	r1, r2, #31
   d5e96:	bf5c      	itt	pl
   d5e98:	2201      	movpl	r2, #1
   d5e9a:	601a      	strpl	r2, [r3, #0]
   d5e9c:	4b10      	ldr	r3, [pc, #64]	; (d5ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5e9e:	681a      	ldr	r2, [r3, #0]
   d5ea0:	07d2      	lsls	r2, r2, #31
   d5ea2:	bf5c      	itt	pl
   d5ea4:	2201      	movpl	r2, #1
   d5ea6:	601a      	strpl	r2, [r3, #0]
   d5ea8:	4b0e      	ldr	r3, [pc, #56]	; (d5ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5eaa:	681a      	ldr	r2, [r3, #0]
   d5eac:	07d0      	lsls	r0, r2, #31
   d5eae:	bf5c      	itt	pl
   d5eb0:	2201      	movpl	r2, #1
   d5eb2:	601a      	strpl	r2, [r3, #0]
   d5eb4:	4b0c      	ldr	r3, [pc, #48]	; (d5ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5eb6:	681a      	ldr	r2, [r3, #0]
   d5eb8:	07d1      	lsls	r1, r2, #31
   d5eba:	bf5c      	itt	pl
   d5ebc:	2201      	movpl	r2, #1
   d5ebe:	601a      	strpl	r2, [r3, #0]
   d5ec0:	4b0a      	ldr	r3, [pc, #40]	; (d5eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5ec2:	681a      	ldr	r2, [r3, #0]
   d5ec4:	07d2      	lsls	r2, r2, #31
   d5ec6:	bf5c      	itt	pl
   d5ec8:	2201      	movpl	r2, #1
   d5eca:	601a      	strpl	r2, [r3, #0]
   d5ecc:	4770      	bx	lr
   d5ece:	bf00      	nop
   d5ed0:	2003e7bc 	.word	0x2003e7bc
   d5ed4:	2003e7b8 	.word	0x2003e7b8
   d5ed8:	2003e7b4 	.word	0x2003e7b4
   d5edc:	2003e7b0 	.word	0x2003e7b0
   d5ee0:	2003e7ac 	.word	0x2003e7ac
   d5ee4:	2003e7a8 	.word	0x2003e7a8
   d5ee8:	2003e7a4 	.word	0x2003e7a4
   d5eec:	2003e7a0 	.word	0x2003e7a0

000d5ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5ef0:	4b24      	ldr	r3, [pc, #144]	; (d5f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5ef2:	681a      	ldr	r2, [r3, #0]
   d5ef4:	07d0      	lsls	r0, r2, #31
   d5ef6:	bf5c      	itt	pl
   d5ef8:	2201      	movpl	r2, #1
   d5efa:	601a      	strpl	r2, [r3, #0]
   d5efc:	4b22      	ldr	r3, [pc, #136]	; (d5f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5efe:	681a      	ldr	r2, [r3, #0]
   d5f00:	07d1      	lsls	r1, r2, #31
   d5f02:	bf5c      	itt	pl
   d5f04:	2201      	movpl	r2, #1
   d5f06:	601a      	strpl	r2, [r3, #0]
   d5f08:	4b20      	ldr	r3, [pc, #128]	; (d5f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5f0a:	681a      	ldr	r2, [r3, #0]
   d5f0c:	07d2      	lsls	r2, r2, #31
   d5f0e:	bf5c      	itt	pl
   d5f10:	2201      	movpl	r2, #1
   d5f12:	601a      	strpl	r2, [r3, #0]
   d5f14:	4b1e      	ldr	r3, [pc, #120]	; (d5f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5f16:	681a      	ldr	r2, [r3, #0]
   d5f18:	07d0      	lsls	r0, r2, #31
   d5f1a:	bf5c      	itt	pl
   d5f1c:	2201      	movpl	r2, #1
   d5f1e:	601a      	strpl	r2, [r3, #0]
   d5f20:	4b1c      	ldr	r3, [pc, #112]	; (d5f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5f22:	681a      	ldr	r2, [r3, #0]
   d5f24:	07d1      	lsls	r1, r2, #31
   d5f26:	bf5c      	itt	pl
   d5f28:	2201      	movpl	r2, #1
   d5f2a:	601a      	strpl	r2, [r3, #0]
   d5f2c:	4b1a      	ldr	r3, [pc, #104]	; (d5f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5f2e:	681a      	ldr	r2, [r3, #0]
   d5f30:	07d2      	lsls	r2, r2, #31
   d5f32:	bf5c      	itt	pl
   d5f34:	2201      	movpl	r2, #1
   d5f36:	601a      	strpl	r2, [r3, #0]
   d5f38:	4b18      	ldr	r3, [pc, #96]	; (d5f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5f3a:	681a      	ldr	r2, [r3, #0]
   d5f3c:	07d0      	lsls	r0, r2, #31
   d5f3e:	bf5c      	itt	pl
   d5f40:	2201      	movpl	r2, #1
   d5f42:	601a      	strpl	r2, [r3, #0]
   d5f44:	4b16      	ldr	r3, [pc, #88]	; (d5fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5f46:	681a      	ldr	r2, [r3, #0]
   d5f48:	07d1      	lsls	r1, r2, #31
   d5f4a:	bf5c      	itt	pl
   d5f4c:	2201      	movpl	r2, #1
   d5f4e:	601a      	strpl	r2, [r3, #0]
   d5f50:	4b14      	ldr	r3, [pc, #80]	; (d5fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5f52:	681a      	ldr	r2, [r3, #0]
   d5f54:	07d2      	lsls	r2, r2, #31
   d5f56:	bf5c      	itt	pl
   d5f58:	2201      	movpl	r2, #1
   d5f5a:	601a      	strpl	r2, [r3, #0]
   d5f5c:	4b12      	ldr	r3, [pc, #72]	; (d5fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5f5e:	681a      	ldr	r2, [r3, #0]
   d5f60:	07d0      	lsls	r0, r2, #31
   d5f62:	bf5c      	itt	pl
   d5f64:	2201      	movpl	r2, #1
   d5f66:	601a      	strpl	r2, [r3, #0]
   d5f68:	4b10      	ldr	r3, [pc, #64]	; (d5fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5f6a:	681a      	ldr	r2, [r3, #0]
   d5f6c:	07d1      	lsls	r1, r2, #31
   d5f6e:	bf5c      	itt	pl
   d5f70:	2201      	movpl	r2, #1
   d5f72:	601a      	strpl	r2, [r3, #0]
   d5f74:	4b0e      	ldr	r3, [pc, #56]	; (d5fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5f76:	681a      	ldr	r2, [r3, #0]
   d5f78:	07d2      	lsls	r2, r2, #31
   d5f7a:	bf5c      	itt	pl
   d5f7c:	2201      	movpl	r2, #1
   d5f7e:	601a      	strpl	r2, [r3, #0]
   d5f80:	4770      	bx	lr
   d5f82:	bf00      	nop
   d5f84:	2003e7ec 	.word	0x2003e7ec
   d5f88:	2003e7e8 	.word	0x2003e7e8
   d5f8c:	2003e7e4 	.word	0x2003e7e4
   d5f90:	2003e7e0 	.word	0x2003e7e0
   d5f94:	2003e7dc 	.word	0x2003e7dc
   d5f98:	2003e7d8 	.word	0x2003e7d8
   d5f9c:	2003e7d4 	.word	0x2003e7d4
   d5fa0:	2003e7d0 	.word	0x2003e7d0
   d5fa4:	2003e7cc 	.word	0x2003e7cc
   d5fa8:	2003e7c8 	.word	0x2003e7c8
   d5fac:	2003e7c4 	.word	0x2003e7c4
   d5fb0:	2003e7c0 	.word	0x2003e7c0

000d5fb4 <__aeabi_drsub>:
   d5fb4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5fb8:	e002      	b.n	d5fc0 <__adddf3>
   d5fba:	bf00      	nop

000d5fbc <__aeabi_dsub>:
   d5fbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5fc0 <__adddf3>:
   d5fc0:	b530      	push	{r4, r5, lr}
   d5fc2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5fc6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5fca:	ea94 0f05 	teq	r4, r5
   d5fce:	bf08      	it	eq
   d5fd0:	ea90 0f02 	teqeq	r0, r2
   d5fd4:	bf1f      	itttt	ne
   d5fd6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5fda:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5fde:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5fe2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5fe6:	f000 80e2 	beq.w	d61ae <__adddf3+0x1ee>
   d5fea:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5fee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5ff2:	bfb8      	it	lt
   d5ff4:	426d      	neglt	r5, r5
   d5ff6:	dd0c      	ble.n	d6012 <__adddf3+0x52>
   d5ff8:	442c      	add	r4, r5
   d5ffa:	ea80 0202 	eor.w	r2, r0, r2
   d5ffe:	ea81 0303 	eor.w	r3, r1, r3
   d6002:	ea82 0000 	eor.w	r0, r2, r0
   d6006:	ea83 0101 	eor.w	r1, r3, r1
   d600a:	ea80 0202 	eor.w	r2, r0, r2
   d600e:	ea81 0303 	eor.w	r3, r1, r3
   d6012:	2d36      	cmp	r5, #54	; 0x36
   d6014:	bf88      	it	hi
   d6016:	bd30      	pophi	{r4, r5, pc}
   d6018:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d601c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6020:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6024:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6028:	d002      	beq.n	d6030 <__adddf3+0x70>
   d602a:	4240      	negs	r0, r0
   d602c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6030:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6034:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6038:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d603c:	d002      	beq.n	d6044 <__adddf3+0x84>
   d603e:	4252      	negs	r2, r2
   d6040:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6044:	ea94 0f05 	teq	r4, r5
   d6048:	f000 80a7 	beq.w	d619a <__adddf3+0x1da>
   d604c:	f1a4 0401 	sub.w	r4, r4, #1
   d6050:	f1d5 0e20 	rsbs	lr, r5, #32
   d6054:	db0d      	blt.n	d6072 <__adddf3+0xb2>
   d6056:	fa02 fc0e 	lsl.w	ip, r2, lr
   d605a:	fa22 f205 	lsr.w	r2, r2, r5
   d605e:	1880      	adds	r0, r0, r2
   d6060:	f141 0100 	adc.w	r1, r1, #0
   d6064:	fa03 f20e 	lsl.w	r2, r3, lr
   d6068:	1880      	adds	r0, r0, r2
   d606a:	fa43 f305 	asr.w	r3, r3, r5
   d606e:	4159      	adcs	r1, r3
   d6070:	e00e      	b.n	d6090 <__adddf3+0xd0>
   d6072:	f1a5 0520 	sub.w	r5, r5, #32
   d6076:	f10e 0e20 	add.w	lr, lr, #32
   d607a:	2a01      	cmp	r2, #1
   d607c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6080:	bf28      	it	cs
   d6082:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6086:	fa43 f305 	asr.w	r3, r3, r5
   d608a:	18c0      	adds	r0, r0, r3
   d608c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6090:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6094:	d507      	bpl.n	d60a6 <__adddf3+0xe6>
   d6096:	f04f 0e00 	mov.w	lr, #0
   d609a:	f1dc 0c00 	rsbs	ip, ip, #0
   d609e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d60a2:	eb6e 0101 	sbc.w	r1, lr, r1
   d60a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d60aa:	d31b      	bcc.n	d60e4 <__adddf3+0x124>
   d60ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d60b0:	d30c      	bcc.n	d60cc <__adddf3+0x10c>
   d60b2:	0849      	lsrs	r1, r1, #1
   d60b4:	ea5f 0030 	movs.w	r0, r0, rrx
   d60b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d60bc:	f104 0401 	add.w	r4, r4, #1
   d60c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d60c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d60c8:	f080 809a 	bcs.w	d6200 <__adddf3+0x240>
   d60cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d60d0:	bf08      	it	eq
   d60d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d60d6:	f150 0000 	adcs.w	r0, r0, #0
   d60da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d60de:	ea41 0105 	orr.w	r1, r1, r5
   d60e2:	bd30      	pop	{r4, r5, pc}
   d60e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d60e8:	4140      	adcs	r0, r0
   d60ea:	eb41 0101 	adc.w	r1, r1, r1
   d60ee:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d60f2:	f1a4 0401 	sub.w	r4, r4, #1
   d60f6:	d1e9      	bne.n	d60cc <__adddf3+0x10c>
   d60f8:	f091 0f00 	teq	r1, #0
   d60fc:	bf04      	itt	eq
   d60fe:	4601      	moveq	r1, r0
   d6100:	2000      	moveq	r0, #0
   d6102:	fab1 f381 	clz	r3, r1
   d6106:	bf08      	it	eq
   d6108:	3320      	addeq	r3, #32
   d610a:	f1a3 030b 	sub.w	r3, r3, #11
   d610e:	f1b3 0220 	subs.w	r2, r3, #32
   d6112:	da0c      	bge.n	d612e <__adddf3+0x16e>
   d6114:	320c      	adds	r2, #12
   d6116:	dd08      	ble.n	d612a <__adddf3+0x16a>
   d6118:	f102 0c14 	add.w	ip, r2, #20
   d611c:	f1c2 020c 	rsb	r2, r2, #12
   d6120:	fa01 f00c 	lsl.w	r0, r1, ip
   d6124:	fa21 f102 	lsr.w	r1, r1, r2
   d6128:	e00c      	b.n	d6144 <__adddf3+0x184>
   d612a:	f102 0214 	add.w	r2, r2, #20
   d612e:	bfd8      	it	le
   d6130:	f1c2 0c20 	rsble	ip, r2, #32
   d6134:	fa01 f102 	lsl.w	r1, r1, r2
   d6138:	fa20 fc0c 	lsr.w	ip, r0, ip
   d613c:	bfdc      	itt	le
   d613e:	ea41 010c 	orrle.w	r1, r1, ip
   d6142:	4090      	lslle	r0, r2
   d6144:	1ae4      	subs	r4, r4, r3
   d6146:	bfa2      	ittt	ge
   d6148:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d614c:	4329      	orrge	r1, r5
   d614e:	bd30      	popge	{r4, r5, pc}
   d6150:	ea6f 0404 	mvn.w	r4, r4
   d6154:	3c1f      	subs	r4, #31
   d6156:	da1c      	bge.n	d6192 <__adddf3+0x1d2>
   d6158:	340c      	adds	r4, #12
   d615a:	dc0e      	bgt.n	d617a <__adddf3+0x1ba>
   d615c:	f104 0414 	add.w	r4, r4, #20
   d6160:	f1c4 0220 	rsb	r2, r4, #32
   d6164:	fa20 f004 	lsr.w	r0, r0, r4
   d6168:	fa01 f302 	lsl.w	r3, r1, r2
   d616c:	ea40 0003 	orr.w	r0, r0, r3
   d6170:	fa21 f304 	lsr.w	r3, r1, r4
   d6174:	ea45 0103 	orr.w	r1, r5, r3
   d6178:	bd30      	pop	{r4, r5, pc}
   d617a:	f1c4 040c 	rsb	r4, r4, #12
   d617e:	f1c4 0220 	rsb	r2, r4, #32
   d6182:	fa20 f002 	lsr.w	r0, r0, r2
   d6186:	fa01 f304 	lsl.w	r3, r1, r4
   d618a:	ea40 0003 	orr.w	r0, r0, r3
   d618e:	4629      	mov	r1, r5
   d6190:	bd30      	pop	{r4, r5, pc}
   d6192:	fa21 f004 	lsr.w	r0, r1, r4
   d6196:	4629      	mov	r1, r5
   d6198:	bd30      	pop	{r4, r5, pc}
   d619a:	f094 0f00 	teq	r4, #0
   d619e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d61a2:	bf06      	itte	eq
   d61a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d61a8:	3401      	addeq	r4, #1
   d61aa:	3d01      	subne	r5, #1
   d61ac:	e74e      	b.n	d604c <__adddf3+0x8c>
   d61ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d61b2:	bf18      	it	ne
   d61b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d61b8:	d029      	beq.n	d620e <__adddf3+0x24e>
   d61ba:	ea94 0f05 	teq	r4, r5
   d61be:	bf08      	it	eq
   d61c0:	ea90 0f02 	teqeq	r0, r2
   d61c4:	d005      	beq.n	d61d2 <__adddf3+0x212>
   d61c6:	ea54 0c00 	orrs.w	ip, r4, r0
   d61ca:	bf04      	itt	eq
   d61cc:	4619      	moveq	r1, r3
   d61ce:	4610      	moveq	r0, r2
   d61d0:	bd30      	pop	{r4, r5, pc}
   d61d2:	ea91 0f03 	teq	r1, r3
   d61d6:	bf1e      	ittt	ne
   d61d8:	2100      	movne	r1, #0
   d61da:	2000      	movne	r0, #0
   d61dc:	bd30      	popne	{r4, r5, pc}
   d61de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d61e2:	d105      	bne.n	d61f0 <__adddf3+0x230>
   d61e4:	0040      	lsls	r0, r0, #1
   d61e6:	4149      	adcs	r1, r1
   d61e8:	bf28      	it	cs
   d61ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d61ee:	bd30      	pop	{r4, r5, pc}
   d61f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d61f4:	bf3c      	itt	cc
   d61f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d61fa:	bd30      	popcc	{r4, r5, pc}
   d61fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6200:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6204:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6208:	f04f 0000 	mov.w	r0, #0
   d620c:	bd30      	pop	{r4, r5, pc}
   d620e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6212:	bf1a      	itte	ne
   d6214:	4619      	movne	r1, r3
   d6216:	4610      	movne	r0, r2
   d6218:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d621c:	bf1c      	itt	ne
   d621e:	460b      	movne	r3, r1
   d6220:	4602      	movne	r2, r0
   d6222:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6226:	bf06      	itte	eq
   d6228:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d622c:	ea91 0f03 	teqeq	r1, r3
   d6230:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6234:	bd30      	pop	{r4, r5, pc}
   d6236:	bf00      	nop

000d6238 <__aeabi_ui2d>:
   d6238:	f090 0f00 	teq	r0, #0
   d623c:	bf04      	itt	eq
   d623e:	2100      	moveq	r1, #0
   d6240:	4770      	bxeq	lr
   d6242:	b530      	push	{r4, r5, lr}
   d6244:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6248:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d624c:	f04f 0500 	mov.w	r5, #0
   d6250:	f04f 0100 	mov.w	r1, #0
   d6254:	e750      	b.n	d60f8 <__adddf3+0x138>
   d6256:	bf00      	nop

000d6258 <__aeabi_i2d>:
   d6258:	f090 0f00 	teq	r0, #0
   d625c:	bf04      	itt	eq
   d625e:	2100      	moveq	r1, #0
   d6260:	4770      	bxeq	lr
   d6262:	b530      	push	{r4, r5, lr}
   d6264:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6268:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d626c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6270:	bf48      	it	mi
   d6272:	4240      	negmi	r0, r0
   d6274:	f04f 0100 	mov.w	r1, #0
   d6278:	e73e      	b.n	d60f8 <__adddf3+0x138>
   d627a:	bf00      	nop

000d627c <__aeabi_f2d>:
   d627c:	0042      	lsls	r2, r0, #1
   d627e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6282:	ea4f 0131 	mov.w	r1, r1, rrx
   d6286:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d628a:	bf1f      	itttt	ne
   d628c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6290:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6294:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6298:	4770      	bxne	lr
   d629a:	f092 0f00 	teq	r2, #0
   d629e:	bf14      	ite	ne
   d62a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d62a4:	4770      	bxeq	lr
   d62a6:	b530      	push	{r4, r5, lr}
   d62a8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d62ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d62b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d62b4:	e720      	b.n	d60f8 <__adddf3+0x138>
   d62b6:	bf00      	nop

000d62b8 <__aeabi_ul2d>:
   d62b8:	ea50 0201 	orrs.w	r2, r0, r1
   d62bc:	bf08      	it	eq
   d62be:	4770      	bxeq	lr
   d62c0:	b530      	push	{r4, r5, lr}
   d62c2:	f04f 0500 	mov.w	r5, #0
   d62c6:	e00a      	b.n	d62de <__aeabi_l2d+0x16>

000d62c8 <__aeabi_l2d>:
   d62c8:	ea50 0201 	orrs.w	r2, r0, r1
   d62cc:	bf08      	it	eq
   d62ce:	4770      	bxeq	lr
   d62d0:	b530      	push	{r4, r5, lr}
   d62d2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d62d6:	d502      	bpl.n	d62de <__aeabi_l2d+0x16>
   d62d8:	4240      	negs	r0, r0
   d62da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d62de:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d62e2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d62e6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d62ea:	f43f aedc 	beq.w	d60a6 <__adddf3+0xe6>
   d62ee:	f04f 0203 	mov.w	r2, #3
   d62f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d62f6:	bf18      	it	ne
   d62f8:	3203      	addne	r2, #3
   d62fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d62fe:	bf18      	it	ne
   d6300:	3203      	addne	r2, #3
   d6302:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6306:	f1c2 0320 	rsb	r3, r2, #32
   d630a:	fa00 fc03 	lsl.w	ip, r0, r3
   d630e:	fa20 f002 	lsr.w	r0, r0, r2
   d6312:	fa01 fe03 	lsl.w	lr, r1, r3
   d6316:	ea40 000e 	orr.w	r0, r0, lr
   d631a:	fa21 f102 	lsr.w	r1, r1, r2
   d631e:	4414      	add	r4, r2
   d6320:	e6c1      	b.n	d60a6 <__adddf3+0xe6>
   d6322:	bf00      	nop

000d6324 <__aeabi_dmul>:
   d6324:	b570      	push	{r4, r5, r6, lr}
   d6326:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d632a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d632e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6332:	bf1d      	ittte	ne
   d6334:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6338:	ea94 0f0c 	teqne	r4, ip
   d633c:	ea95 0f0c 	teqne	r5, ip
   d6340:	f000 f8de 	bleq	d6500 <__aeabi_dmul+0x1dc>
   d6344:	442c      	add	r4, r5
   d6346:	ea81 0603 	eor.w	r6, r1, r3
   d634a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d634e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6352:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6356:	bf18      	it	ne
   d6358:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d635c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6360:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6364:	d038      	beq.n	d63d8 <__aeabi_dmul+0xb4>
   d6366:	fba0 ce02 	umull	ip, lr, r0, r2
   d636a:	f04f 0500 	mov.w	r5, #0
   d636e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6372:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6376:	fbe0 e503 	umlal	lr, r5, r0, r3
   d637a:	f04f 0600 	mov.w	r6, #0
   d637e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6382:	f09c 0f00 	teq	ip, #0
   d6386:	bf18      	it	ne
   d6388:	f04e 0e01 	orrne.w	lr, lr, #1
   d638c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6390:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6394:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6398:	d204      	bcs.n	d63a4 <__aeabi_dmul+0x80>
   d639a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d639e:	416d      	adcs	r5, r5
   d63a0:	eb46 0606 	adc.w	r6, r6, r6
   d63a4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d63a8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d63ac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d63b0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d63b4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d63b8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d63bc:	bf88      	it	hi
   d63be:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d63c2:	d81e      	bhi.n	d6402 <__aeabi_dmul+0xde>
   d63c4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d63c8:	bf08      	it	eq
   d63ca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d63ce:	f150 0000 	adcs.w	r0, r0, #0
   d63d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d63d6:	bd70      	pop	{r4, r5, r6, pc}
   d63d8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d63dc:	ea46 0101 	orr.w	r1, r6, r1
   d63e0:	ea40 0002 	orr.w	r0, r0, r2
   d63e4:	ea81 0103 	eor.w	r1, r1, r3
   d63e8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d63ec:	bfc2      	ittt	gt
   d63ee:	ebd4 050c 	rsbsgt	r5, r4, ip
   d63f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d63f6:	bd70      	popgt	{r4, r5, r6, pc}
   d63f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d63fc:	f04f 0e00 	mov.w	lr, #0
   d6400:	3c01      	subs	r4, #1
   d6402:	f300 80ab 	bgt.w	d655c <__aeabi_dmul+0x238>
   d6406:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d640a:	bfde      	ittt	le
   d640c:	2000      	movle	r0, #0
   d640e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6412:	bd70      	pople	{r4, r5, r6, pc}
   d6414:	f1c4 0400 	rsb	r4, r4, #0
   d6418:	3c20      	subs	r4, #32
   d641a:	da35      	bge.n	d6488 <__aeabi_dmul+0x164>
   d641c:	340c      	adds	r4, #12
   d641e:	dc1b      	bgt.n	d6458 <__aeabi_dmul+0x134>
   d6420:	f104 0414 	add.w	r4, r4, #20
   d6424:	f1c4 0520 	rsb	r5, r4, #32
   d6428:	fa00 f305 	lsl.w	r3, r0, r5
   d642c:	fa20 f004 	lsr.w	r0, r0, r4
   d6430:	fa01 f205 	lsl.w	r2, r1, r5
   d6434:	ea40 0002 	orr.w	r0, r0, r2
   d6438:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d643c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6440:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6444:	fa21 f604 	lsr.w	r6, r1, r4
   d6448:	eb42 0106 	adc.w	r1, r2, r6
   d644c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6450:	bf08      	it	eq
   d6452:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6456:	bd70      	pop	{r4, r5, r6, pc}
   d6458:	f1c4 040c 	rsb	r4, r4, #12
   d645c:	f1c4 0520 	rsb	r5, r4, #32
   d6460:	fa00 f304 	lsl.w	r3, r0, r4
   d6464:	fa20 f005 	lsr.w	r0, r0, r5
   d6468:	fa01 f204 	lsl.w	r2, r1, r4
   d646c:	ea40 0002 	orr.w	r0, r0, r2
   d6470:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6474:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6478:	f141 0100 	adc.w	r1, r1, #0
   d647c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6480:	bf08      	it	eq
   d6482:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6486:	bd70      	pop	{r4, r5, r6, pc}
   d6488:	f1c4 0520 	rsb	r5, r4, #32
   d648c:	fa00 f205 	lsl.w	r2, r0, r5
   d6490:	ea4e 0e02 	orr.w	lr, lr, r2
   d6494:	fa20 f304 	lsr.w	r3, r0, r4
   d6498:	fa01 f205 	lsl.w	r2, r1, r5
   d649c:	ea43 0302 	orr.w	r3, r3, r2
   d64a0:	fa21 f004 	lsr.w	r0, r1, r4
   d64a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d64a8:	fa21 f204 	lsr.w	r2, r1, r4
   d64ac:	ea20 0002 	bic.w	r0, r0, r2
   d64b0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d64b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d64b8:	bf08      	it	eq
   d64ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d64be:	bd70      	pop	{r4, r5, r6, pc}
   d64c0:	f094 0f00 	teq	r4, #0
   d64c4:	d10f      	bne.n	d64e6 <__aeabi_dmul+0x1c2>
   d64c6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d64ca:	0040      	lsls	r0, r0, #1
   d64cc:	eb41 0101 	adc.w	r1, r1, r1
   d64d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d64d4:	bf08      	it	eq
   d64d6:	3c01      	subeq	r4, #1
   d64d8:	d0f7      	beq.n	d64ca <__aeabi_dmul+0x1a6>
   d64da:	ea41 0106 	orr.w	r1, r1, r6
   d64de:	f095 0f00 	teq	r5, #0
   d64e2:	bf18      	it	ne
   d64e4:	4770      	bxne	lr
   d64e6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d64ea:	0052      	lsls	r2, r2, #1
   d64ec:	eb43 0303 	adc.w	r3, r3, r3
   d64f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d64f4:	bf08      	it	eq
   d64f6:	3d01      	subeq	r5, #1
   d64f8:	d0f7      	beq.n	d64ea <__aeabi_dmul+0x1c6>
   d64fa:	ea43 0306 	orr.w	r3, r3, r6
   d64fe:	4770      	bx	lr
   d6500:	ea94 0f0c 	teq	r4, ip
   d6504:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6508:	bf18      	it	ne
   d650a:	ea95 0f0c 	teqne	r5, ip
   d650e:	d00c      	beq.n	d652a <__aeabi_dmul+0x206>
   d6510:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6514:	bf18      	it	ne
   d6516:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d651a:	d1d1      	bne.n	d64c0 <__aeabi_dmul+0x19c>
   d651c:	ea81 0103 	eor.w	r1, r1, r3
   d6520:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6524:	f04f 0000 	mov.w	r0, #0
   d6528:	bd70      	pop	{r4, r5, r6, pc}
   d652a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d652e:	bf06      	itte	eq
   d6530:	4610      	moveq	r0, r2
   d6532:	4619      	moveq	r1, r3
   d6534:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6538:	d019      	beq.n	d656e <__aeabi_dmul+0x24a>
   d653a:	ea94 0f0c 	teq	r4, ip
   d653e:	d102      	bne.n	d6546 <__aeabi_dmul+0x222>
   d6540:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6544:	d113      	bne.n	d656e <__aeabi_dmul+0x24a>
   d6546:	ea95 0f0c 	teq	r5, ip
   d654a:	d105      	bne.n	d6558 <__aeabi_dmul+0x234>
   d654c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6550:	bf1c      	itt	ne
   d6552:	4610      	movne	r0, r2
   d6554:	4619      	movne	r1, r3
   d6556:	d10a      	bne.n	d656e <__aeabi_dmul+0x24a>
   d6558:	ea81 0103 	eor.w	r1, r1, r3
   d655c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6560:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6564:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6568:	f04f 0000 	mov.w	r0, #0
   d656c:	bd70      	pop	{r4, r5, r6, pc}
   d656e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6572:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6576:	bd70      	pop	{r4, r5, r6, pc}

000d6578 <__aeabi_ddiv>:
   d6578:	b570      	push	{r4, r5, r6, lr}
   d657a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d657e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6586:	bf1d      	ittte	ne
   d6588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d658c:	ea94 0f0c 	teqne	r4, ip
   d6590:	ea95 0f0c 	teqne	r5, ip
   d6594:	f000 f8a7 	bleq	d66e6 <__aeabi_ddiv+0x16e>
   d6598:	eba4 0405 	sub.w	r4, r4, r5
   d659c:	ea81 0e03 	eor.w	lr, r1, r3
   d65a0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d65a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d65a8:	f000 8088 	beq.w	d66bc <__aeabi_ddiv+0x144>
   d65ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d65b0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d65b4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d65b8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d65bc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d65c0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d65c4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d65c8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d65cc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d65d0:	429d      	cmp	r5, r3
   d65d2:	bf08      	it	eq
   d65d4:	4296      	cmpeq	r6, r2
   d65d6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d65da:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d65de:	d202      	bcs.n	d65e6 <__aeabi_ddiv+0x6e>
   d65e0:	085b      	lsrs	r3, r3, #1
   d65e2:	ea4f 0232 	mov.w	r2, r2, rrx
   d65e6:	1ab6      	subs	r6, r6, r2
   d65e8:	eb65 0503 	sbc.w	r5, r5, r3
   d65ec:	085b      	lsrs	r3, r3, #1
   d65ee:	ea4f 0232 	mov.w	r2, r2, rrx
   d65f2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d65f6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d65fa:	ebb6 0e02 	subs.w	lr, r6, r2
   d65fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6602:	bf22      	ittt	cs
   d6604:	1ab6      	subcs	r6, r6, r2
   d6606:	4675      	movcs	r5, lr
   d6608:	ea40 000c 	orrcs.w	r0, r0, ip
   d660c:	085b      	lsrs	r3, r3, #1
   d660e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6612:	ebb6 0e02 	subs.w	lr, r6, r2
   d6616:	eb75 0e03 	sbcs.w	lr, r5, r3
   d661a:	bf22      	ittt	cs
   d661c:	1ab6      	subcs	r6, r6, r2
   d661e:	4675      	movcs	r5, lr
   d6620:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6624:	085b      	lsrs	r3, r3, #1
   d6626:	ea4f 0232 	mov.w	r2, r2, rrx
   d662a:	ebb6 0e02 	subs.w	lr, r6, r2
   d662e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6632:	bf22      	ittt	cs
   d6634:	1ab6      	subcs	r6, r6, r2
   d6636:	4675      	movcs	r5, lr
   d6638:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d663c:	085b      	lsrs	r3, r3, #1
   d663e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6642:	ebb6 0e02 	subs.w	lr, r6, r2
   d6646:	eb75 0e03 	sbcs.w	lr, r5, r3
   d664a:	bf22      	ittt	cs
   d664c:	1ab6      	subcs	r6, r6, r2
   d664e:	4675      	movcs	r5, lr
   d6650:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6654:	ea55 0e06 	orrs.w	lr, r5, r6
   d6658:	d018      	beq.n	d668c <__aeabi_ddiv+0x114>
   d665a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d665e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6662:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6666:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d666a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d666e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6672:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6676:	d1c0      	bne.n	d65fa <__aeabi_ddiv+0x82>
   d6678:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d667c:	d10b      	bne.n	d6696 <__aeabi_ddiv+0x11e>
   d667e:	ea41 0100 	orr.w	r1, r1, r0
   d6682:	f04f 0000 	mov.w	r0, #0
   d6686:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d668a:	e7b6      	b.n	d65fa <__aeabi_ddiv+0x82>
   d668c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6690:	bf04      	itt	eq
   d6692:	4301      	orreq	r1, r0
   d6694:	2000      	moveq	r0, #0
   d6696:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d669a:	bf88      	it	hi
   d669c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d66a0:	f63f aeaf 	bhi.w	d6402 <__aeabi_dmul+0xde>
   d66a4:	ebb5 0c03 	subs.w	ip, r5, r3
   d66a8:	bf04      	itt	eq
   d66aa:	ebb6 0c02 	subseq.w	ip, r6, r2
   d66ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d66b2:	f150 0000 	adcs.w	r0, r0, #0
   d66b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d66ba:	bd70      	pop	{r4, r5, r6, pc}
   d66bc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d66c0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d66c4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d66c8:	bfc2      	ittt	gt
   d66ca:	ebd4 050c 	rsbsgt	r5, r4, ip
   d66ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d66d2:	bd70      	popgt	{r4, r5, r6, pc}
   d66d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d66d8:	f04f 0e00 	mov.w	lr, #0
   d66dc:	3c01      	subs	r4, #1
   d66de:	e690      	b.n	d6402 <__aeabi_dmul+0xde>
   d66e0:	ea45 0e06 	orr.w	lr, r5, r6
   d66e4:	e68d      	b.n	d6402 <__aeabi_dmul+0xde>
   d66e6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d66ea:	ea94 0f0c 	teq	r4, ip
   d66ee:	bf08      	it	eq
   d66f0:	ea95 0f0c 	teqeq	r5, ip
   d66f4:	f43f af3b 	beq.w	d656e <__aeabi_dmul+0x24a>
   d66f8:	ea94 0f0c 	teq	r4, ip
   d66fc:	d10a      	bne.n	d6714 <__aeabi_ddiv+0x19c>
   d66fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6702:	f47f af34 	bne.w	d656e <__aeabi_dmul+0x24a>
   d6706:	ea95 0f0c 	teq	r5, ip
   d670a:	f47f af25 	bne.w	d6558 <__aeabi_dmul+0x234>
   d670e:	4610      	mov	r0, r2
   d6710:	4619      	mov	r1, r3
   d6712:	e72c      	b.n	d656e <__aeabi_dmul+0x24a>
   d6714:	ea95 0f0c 	teq	r5, ip
   d6718:	d106      	bne.n	d6728 <__aeabi_ddiv+0x1b0>
   d671a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d671e:	f43f aefd 	beq.w	d651c <__aeabi_dmul+0x1f8>
   d6722:	4610      	mov	r0, r2
   d6724:	4619      	mov	r1, r3
   d6726:	e722      	b.n	d656e <__aeabi_dmul+0x24a>
   d6728:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d672c:	bf18      	it	ne
   d672e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6732:	f47f aec5 	bne.w	d64c0 <__aeabi_dmul+0x19c>
   d6736:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d673a:	f47f af0d 	bne.w	d6558 <__aeabi_dmul+0x234>
   d673e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6742:	f47f aeeb 	bne.w	d651c <__aeabi_dmul+0x1f8>
   d6746:	e712      	b.n	d656e <__aeabi_dmul+0x24a>

000d6748 <__gedf2>:
   d6748:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d674c:	e006      	b.n	d675c <__cmpdf2+0x4>
   d674e:	bf00      	nop

000d6750 <__ledf2>:
   d6750:	f04f 0c01 	mov.w	ip, #1
   d6754:	e002      	b.n	d675c <__cmpdf2+0x4>
   d6756:	bf00      	nop

000d6758 <__cmpdf2>:
   d6758:	f04f 0c01 	mov.w	ip, #1
   d675c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6760:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6764:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6768:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d676c:	bf18      	it	ne
   d676e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6772:	d01b      	beq.n	d67ac <__cmpdf2+0x54>
   d6774:	b001      	add	sp, #4
   d6776:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d677a:	bf0c      	ite	eq
   d677c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6780:	ea91 0f03 	teqne	r1, r3
   d6784:	bf02      	ittt	eq
   d6786:	ea90 0f02 	teqeq	r0, r2
   d678a:	2000      	moveq	r0, #0
   d678c:	4770      	bxeq	lr
   d678e:	f110 0f00 	cmn.w	r0, #0
   d6792:	ea91 0f03 	teq	r1, r3
   d6796:	bf58      	it	pl
   d6798:	4299      	cmppl	r1, r3
   d679a:	bf08      	it	eq
   d679c:	4290      	cmpeq	r0, r2
   d679e:	bf2c      	ite	cs
   d67a0:	17d8      	asrcs	r0, r3, #31
   d67a2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d67a6:	f040 0001 	orr.w	r0, r0, #1
   d67aa:	4770      	bx	lr
   d67ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d67b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d67b4:	d102      	bne.n	d67bc <__cmpdf2+0x64>
   d67b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d67ba:	d107      	bne.n	d67cc <__cmpdf2+0x74>
   d67bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d67c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d67c4:	d1d6      	bne.n	d6774 <__cmpdf2+0x1c>
   d67c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d67ca:	d0d3      	beq.n	d6774 <__cmpdf2+0x1c>
   d67cc:	f85d 0b04 	ldr.w	r0, [sp], #4
   d67d0:	4770      	bx	lr
   d67d2:	bf00      	nop

000d67d4 <__aeabi_cdrcmple>:
   d67d4:	4684      	mov	ip, r0
   d67d6:	4610      	mov	r0, r2
   d67d8:	4662      	mov	r2, ip
   d67da:	468c      	mov	ip, r1
   d67dc:	4619      	mov	r1, r3
   d67de:	4663      	mov	r3, ip
   d67e0:	e000      	b.n	d67e4 <__aeabi_cdcmpeq>
   d67e2:	bf00      	nop

000d67e4 <__aeabi_cdcmpeq>:
   d67e4:	b501      	push	{r0, lr}
   d67e6:	f7ff ffb7 	bl	d6758 <__cmpdf2>
   d67ea:	2800      	cmp	r0, #0
   d67ec:	bf48      	it	mi
   d67ee:	f110 0f00 	cmnmi.w	r0, #0
   d67f2:	bd01      	pop	{r0, pc}

000d67f4 <__aeabi_dcmpeq>:
   d67f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d67f8:	f7ff fff4 	bl	d67e4 <__aeabi_cdcmpeq>
   d67fc:	bf0c      	ite	eq
   d67fe:	2001      	moveq	r0, #1
   d6800:	2000      	movne	r0, #0
   d6802:	f85d fb08 	ldr.w	pc, [sp], #8
   d6806:	bf00      	nop

000d6808 <__aeabi_dcmplt>:
   d6808:	f84d ed08 	str.w	lr, [sp, #-8]!
   d680c:	f7ff ffea 	bl	d67e4 <__aeabi_cdcmpeq>
   d6810:	bf34      	ite	cc
   d6812:	2001      	movcc	r0, #1
   d6814:	2000      	movcs	r0, #0
   d6816:	f85d fb08 	ldr.w	pc, [sp], #8
   d681a:	bf00      	nop

000d681c <__aeabi_dcmple>:
   d681c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6820:	f7ff ffe0 	bl	d67e4 <__aeabi_cdcmpeq>
   d6824:	bf94      	ite	ls
   d6826:	2001      	movls	r0, #1
   d6828:	2000      	movhi	r0, #0
   d682a:	f85d fb08 	ldr.w	pc, [sp], #8
   d682e:	bf00      	nop

000d6830 <__aeabi_dcmpge>:
   d6830:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6834:	f7ff ffce 	bl	d67d4 <__aeabi_cdrcmple>
   d6838:	bf94      	ite	ls
   d683a:	2001      	movls	r0, #1
   d683c:	2000      	movhi	r0, #0
   d683e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6842:	bf00      	nop

000d6844 <__aeabi_dcmpgt>:
   d6844:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6848:	f7ff ffc4 	bl	d67d4 <__aeabi_cdrcmple>
   d684c:	bf34      	ite	cc
   d684e:	2001      	movcc	r0, #1
   d6850:	2000      	movcs	r0, #0
   d6852:	f85d fb08 	ldr.w	pc, [sp], #8
   d6856:	bf00      	nop

000d6858 <__aeabi_d2uiz>:
   d6858:	004a      	lsls	r2, r1, #1
   d685a:	d211      	bcs.n	d6880 <__aeabi_d2uiz+0x28>
   d685c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6860:	d211      	bcs.n	d6886 <__aeabi_d2uiz+0x2e>
   d6862:	d50d      	bpl.n	d6880 <__aeabi_d2uiz+0x28>
   d6864:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6868:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d686c:	d40e      	bmi.n	d688c <__aeabi_d2uiz+0x34>
   d686e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6872:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6876:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d687a:	fa23 f002 	lsr.w	r0, r3, r2
   d687e:	4770      	bx	lr
   d6880:	f04f 0000 	mov.w	r0, #0
   d6884:	4770      	bx	lr
   d6886:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d688a:	d102      	bne.n	d6892 <__aeabi_d2uiz+0x3a>
   d688c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6890:	4770      	bx	lr
   d6892:	f04f 0000 	mov.w	r0, #0
   d6896:	4770      	bx	lr

000d6898 <__aeabi_uldivmod>:
   d6898:	b953      	cbnz	r3, d68b0 <__aeabi_uldivmod+0x18>
   d689a:	b94a      	cbnz	r2, d68b0 <__aeabi_uldivmod+0x18>
   d689c:	2900      	cmp	r1, #0
   d689e:	bf08      	it	eq
   d68a0:	2800      	cmpeq	r0, #0
   d68a2:	bf1c      	itt	ne
   d68a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d68a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d68ac:	f000 b9a2 	b.w	d6bf4 <__aeabi_idiv0>
   d68b0:	f1ad 0c08 	sub.w	ip, sp, #8
   d68b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d68b8:	f000 f82a 	bl	d6910 <__udivmoddi4>
   d68bc:	f8dd e004 	ldr.w	lr, [sp, #4]
   d68c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d68c4:	b004      	add	sp, #16
   d68c6:	4770      	bx	lr

000d68c8 <__aeabi_d2ulz>:
   d68c8:	b5d0      	push	{r4, r6, r7, lr}
   d68ca:	2200      	movs	r2, #0
   d68cc:	4b0e      	ldr	r3, [pc, #56]	; (d6908 <__aeabi_d2ulz+0x40>)
   d68ce:	4606      	mov	r6, r0
   d68d0:	460f      	mov	r7, r1
   d68d2:	f7ff fd27 	bl	d6324 <__aeabi_dmul>
   d68d6:	f7ff ffbf 	bl	d6858 <__aeabi_d2uiz>
   d68da:	4604      	mov	r4, r0
   d68dc:	f7ff fcac 	bl	d6238 <__aeabi_ui2d>
   d68e0:	2200      	movs	r2, #0
   d68e2:	4b0a      	ldr	r3, [pc, #40]	; (d690c <__aeabi_d2ulz+0x44>)
   d68e4:	f7ff fd1e 	bl	d6324 <__aeabi_dmul>
   d68e8:	4602      	mov	r2, r0
   d68ea:	460b      	mov	r3, r1
   d68ec:	4630      	mov	r0, r6
   d68ee:	4639      	mov	r1, r7
   d68f0:	f7ff fb64 	bl	d5fbc <__aeabi_dsub>
   d68f4:	f7ff ffb0 	bl	d6858 <__aeabi_d2uiz>
   d68f8:	4623      	mov	r3, r4
   d68fa:	2200      	movs	r2, #0
   d68fc:	ea42 0200 	orr.w	r2, r2, r0
   d6900:	4610      	mov	r0, r2
   d6902:	4619      	mov	r1, r3
   d6904:	bdd0      	pop	{r4, r6, r7, pc}
   d6906:	bf00      	nop
   d6908:	3df00000 	.word	0x3df00000
   d690c:	41f00000 	.word	0x41f00000

000d6910 <__udivmoddi4>:
   d6910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6914:	468c      	mov	ip, r1
   d6916:	460e      	mov	r6, r1
   d6918:	4604      	mov	r4, r0
   d691a:	9d08      	ldr	r5, [sp, #32]
   d691c:	2b00      	cmp	r3, #0
   d691e:	d150      	bne.n	d69c2 <__udivmoddi4+0xb2>
   d6920:	428a      	cmp	r2, r1
   d6922:	4617      	mov	r7, r2
   d6924:	d96c      	bls.n	d6a00 <__udivmoddi4+0xf0>
   d6926:	fab2 fe82 	clz	lr, r2
   d692a:	f1be 0f00 	cmp.w	lr, #0
   d692e:	d00b      	beq.n	d6948 <__udivmoddi4+0x38>
   d6930:	f1ce 0420 	rsb	r4, lr, #32
   d6934:	fa20 f404 	lsr.w	r4, r0, r4
   d6938:	fa01 f60e 	lsl.w	r6, r1, lr
   d693c:	ea44 0c06 	orr.w	ip, r4, r6
   d6940:	fa02 f70e 	lsl.w	r7, r2, lr
   d6944:	fa00 f40e 	lsl.w	r4, r0, lr
   d6948:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d694c:	0c22      	lsrs	r2, r4, #16
   d694e:	fbbc f0f9 	udiv	r0, ip, r9
   d6952:	fa1f f887 	uxth.w	r8, r7
   d6956:	fb09 c610 	mls	r6, r9, r0, ip
   d695a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d695e:	fb00 f308 	mul.w	r3, r0, r8
   d6962:	42b3      	cmp	r3, r6
   d6964:	d909      	bls.n	d697a <__udivmoddi4+0x6a>
   d6966:	19f6      	adds	r6, r6, r7
   d6968:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d696c:	f080 8122 	bcs.w	d6bb4 <__udivmoddi4+0x2a4>
   d6970:	42b3      	cmp	r3, r6
   d6972:	f240 811f 	bls.w	d6bb4 <__udivmoddi4+0x2a4>
   d6976:	3802      	subs	r0, #2
   d6978:	443e      	add	r6, r7
   d697a:	1af6      	subs	r6, r6, r3
   d697c:	b2a2      	uxth	r2, r4
   d697e:	fbb6 f3f9 	udiv	r3, r6, r9
   d6982:	fb09 6613 	mls	r6, r9, r3, r6
   d6986:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d698a:	fb03 f808 	mul.w	r8, r3, r8
   d698e:	45a0      	cmp	r8, r4
   d6990:	d909      	bls.n	d69a6 <__udivmoddi4+0x96>
   d6992:	19e4      	adds	r4, r4, r7
   d6994:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d6998:	f080 810a 	bcs.w	d6bb0 <__udivmoddi4+0x2a0>
   d699c:	45a0      	cmp	r8, r4
   d699e:	f240 8107 	bls.w	d6bb0 <__udivmoddi4+0x2a0>
   d69a2:	3b02      	subs	r3, #2
   d69a4:	443c      	add	r4, r7
   d69a6:	ebc8 0404 	rsb	r4, r8, r4
   d69aa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d69ae:	2100      	movs	r1, #0
   d69b0:	2d00      	cmp	r5, #0
   d69b2:	d062      	beq.n	d6a7a <__udivmoddi4+0x16a>
   d69b4:	fa24 f40e 	lsr.w	r4, r4, lr
   d69b8:	2300      	movs	r3, #0
   d69ba:	602c      	str	r4, [r5, #0]
   d69bc:	606b      	str	r3, [r5, #4]
   d69be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d69c2:	428b      	cmp	r3, r1
   d69c4:	d907      	bls.n	d69d6 <__udivmoddi4+0xc6>
   d69c6:	2d00      	cmp	r5, #0
   d69c8:	d055      	beq.n	d6a76 <__udivmoddi4+0x166>
   d69ca:	2100      	movs	r1, #0
   d69cc:	e885 0041 	stmia.w	r5, {r0, r6}
   d69d0:	4608      	mov	r0, r1
   d69d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d69d6:	fab3 f183 	clz	r1, r3
   d69da:	2900      	cmp	r1, #0
   d69dc:	f040 8090 	bne.w	d6b00 <__udivmoddi4+0x1f0>
   d69e0:	42b3      	cmp	r3, r6
   d69e2:	d302      	bcc.n	d69ea <__udivmoddi4+0xda>
   d69e4:	4282      	cmp	r2, r0
   d69e6:	f200 80f8 	bhi.w	d6bda <__udivmoddi4+0x2ca>
   d69ea:	1a84      	subs	r4, r0, r2
   d69ec:	eb66 0603 	sbc.w	r6, r6, r3
   d69f0:	2001      	movs	r0, #1
   d69f2:	46b4      	mov	ip, r6
   d69f4:	2d00      	cmp	r5, #0
   d69f6:	d040      	beq.n	d6a7a <__udivmoddi4+0x16a>
   d69f8:	e885 1010 	stmia.w	r5, {r4, ip}
   d69fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6a00:	b912      	cbnz	r2, d6a08 <__udivmoddi4+0xf8>
   d6a02:	2701      	movs	r7, #1
   d6a04:	fbb7 f7f2 	udiv	r7, r7, r2
   d6a08:	fab7 fe87 	clz	lr, r7
   d6a0c:	f1be 0f00 	cmp.w	lr, #0
   d6a10:	d135      	bne.n	d6a7e <__udivmoddi4+0x16e>
   d6a12:	1bf3      	subs	r3, r6, r7
   d6a14:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d6a18:	fa1f fc87 	uxth.w	ip, r7
   d6a1c:	2101      	movs	r1, #1
   d6a1e:	fbb3 f0f8 	udiv	r0, r3, r8
   d6a22:	0c22      	lsrs	r2, r4, #16
   d6a24:	fb08 3610 	mls	r6, r8, r0, r3
   d6a28:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d6a2c:	fb0c f300 	mul.w	r3, ip, r0
   d6a30:	42b3      	cmp	r3, r6
   d6a32:	d907      	bls.n	d6a44 <__udivmoddi4+0x134>
   d6a34:	19f6      	adds	r6, r6, r7
   d6a36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d6a3a:	d202      	bcs.n	d6a42 <__udivmoddi4+0x132>
   d6a3c:	42b3      	cmp	r3, r6
   d6a3e:	f200 80ce 	bhi.w	d6bde <__udivmoddi4+0x2ce>
   d6a42:	4610      	mov	r0, r2
   d6a44:	1af6      	subs	r6, r6, r3
   d6a46:	b2a2      	uxth	r2, r4
   d6a48:	fbb6 f3f8 	udiv	r3, r6, r8
   d6a4c:	fb08 6613 	mls	r6, r8, r3, r6
   d6a50:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d6a54:	fb0c fc03 	mul.w	ip, ip, r3
   d6a58:	45a4      	cmp	ip, r4
   d6a5a:	d907      	bls.n	d6a6c <__udivmoddi4+0x15c>
   d6a5c:	19e4      	adds	r4, r4, r7
   d6a5e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d6a62:	d202      	bcs.n	d6a6a <__udivmoddi4+0x15a>
   d6a64:	45a4      	cmp	ip, r4
   d6a66:	f200 80b5 	bhi.w	d6bd4 <__udivmoddi4+0x2c4>
   d6a6a:	4613      	mov	r3, r2
   d6a6c:	ebcc 0404 	rsb	r4, ip, r4
   d6a70:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d6a74:	e79c      	b.n	d69b0 <__udivmoddi4+0xa0>
   d6a76:	4629      	mov	r1, r5
   d6a78:	4628      	mov	r0, r5
   d6a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6a7e:	f1ce 0120 	rsb	r1, lr, #32
   d6a82:	fa06 f30e 	lsl.w	r3, r6, lr
   d6a86:	fa07 f70e 	lsl.w	r7, r7, lr
   d6a8a:	fa20 f901 	lsr.w	r9, r0, r1
   d6a8e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d6a92:	40ce      	lsrs	r6, r1
   d6a94:	ea49 0903 	orr.w	r9, r9, r3
   d6a98:	fbb6 faf8 	udiv	sl, r6, r8
   d6a9c:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d6aa0:	fb08 661a 	mls	r6, r8, sl, r6
   d6aa4:	fa1f fc87 	uxth.w	ip, r7
   d6aa8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d6aac:	fb0a f20c 	mul.w	r2, sl, ip
   d6ab0:	429a      	cmp	r2, r3
   d6ab2:	fa00 f40e 	lsl.w	r4, r0, lr
   d6ab6:	d90a      	bls.n	d6ace <__udivmoddi4+0x1be>
   d6ab8:	19db      	adds	r3, r3, r7
   d6aba:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   d6abe:	f080 8087 	bcs.w	d6bd0 <__udivmoddi4+0x2c0>
   d6ac2:	429a      	cmp	r2, r3
   d6ac4:	f240 8084 	bls.w	d6bd0 <__udivmoddi4+0x2c0>
   d6ac8:	f1aa 0a02 	sub.w	sl, sl, #2
   d6acc:	443b      	add	r3, r7
   d6ace:	1a9b      	subs	r3, r3, r2
   d6ad0:	fa1f f989 	uxth.w	r9, r9
   d6ad4:	fbb3 f1f8 	udiv	r1, r3, r8
   d6ad8:	fb08 3311 	mls	r3, r8, r1, r3
   d6adc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d6ae0:	fb01 f60c 	mul.w	r6, r1, ip
   d6ae4:	429e      	cmp	r6, r3
   d6ae6:	d907      	bls.n	d6af8 <__udivmoddi4+0x1e8>
   d6ae8:	19db      	adds	r3, r3, r7
   d6aea:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   d6aee:	d26b      	bcs.n	d6bc8 <__udivmoddi4+0x2b8>
   d6af0:	429e      	cmp	r6, r3
   d6af2:	d969      	bls.n	d6bc8 <__udivmoddi4+0x2b8>
   d6af4:	3902      	subs	r1, #2
   d6af6:	443b      	add	r3, r7
   d6af8:	1b9b      	subs	r3, r3, r6
   d6afa:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d6afe:	e78e      	b.n	d6a1e <__udivmoddi4+0x10e>
   d6b00:	f1c1 0e20 	rsb	lr, r1, #32
   d6b04:	fa22 f40e 	lsr.w	r4, r2, lr
   d6b08:	408b      	lsls	r3, r1
   d6b0a:	4323      	orrs	r3, r4
   d6b0c:	fa20 f70e 	lsr.w	r7, r0, lr
   d6b10:	fa06 f401 	lsl.w	r4, r6, r1
   d6b14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d6b18:	fa26 f60e 	lsr.w	r6, r6, lr
   d6b1c:	433c      	orrs	r4, r7
   d6b1e:	fbb6 f9fc 	udiv	r9, r6, ip
   d6b22:	0c27      	lsrs	r7, r4, #16
   d6b24:	fb0c 6619 	mls	r6, ip, r9, r6
   d6b28:	fa1f f883 	uxth.w	r8, r3
   d6b2c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d6b30:	fb09 f708 	mul.w	r7, r9, r8
   d6b34:	42b7      	cmp	r7, r6
   d6b36:	fa02 f201 	lsl.w	r2, r2, r1
   d6b3a:	fa00 fa01 	lsl.w	sl, r0, r1
   d6b3e:	d908      	bls.n	d6b52 <__udivmoddi4+0x242>
   d6b40:	18f6      	adds	r6, r6, r3
   d6b42:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d6b46:	d241      	bcs.n	d6bcc <__udivmoddi4+0x2bc>
   d6b48:	42b7      	cmp	r7, r6
   d6b4a:	d93f      	bls.n	d6bcc <__udivmoddi4+0x2bc>
   d6b4c:	f1a9 0902 	sub.w	r9, r9, #2
   d6b50:	441e      	add	r6, r3
   d6b52:	1bf6      	subs	r6, r6, r7
   d6b54:	b2a0      	uxth	r0, r4
   d6b56:	fbb6 f4fc 	udiv	r4, r6, ip
   d6b5a:	fb0c 6614 	mls	r6, ip, r4, r6
   d6b5e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d6b62:	fb04 f808 	mul.w	r8, r4, r8
   d6b66:	45b8      	cmp	r8, r7
   d6b68:	d907      	bls.n	d6b7a <__udivmoddi4+0x26a>
   d6b6a:	18ff      	adds	r7, r7, r3
   d6b6c:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   d6b70:	d228      	bcs.n	d6bc4 <__udivmoddi4+0x2b4>
   d6b72:	45b8      	cmp	r8, r7
   d6b74:	d926      	bls.n	d6bc4 <__udivmoddi4+0x2b4>
   d6b76:	3c02      	subs	r4, #2
   d6b78:	441f      	add	r7, r3
   d6b7a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d6b7e:	ebc8 0707 	rsb	r7, r8, r7
   d6b82:	fba0 8902 	umull	r8, r9, r0, r2
   d6b86:	454f      	cmp	r7, r9
   d6b88:	4644      	mov	r4, r8
   d6b8a:	464e      	mov	r6, r9
   d6b8c:	d314      	bcc.n	d6bb8 <__udivmoddi4+0x2a8>
   d6b8e:	d029      	beq.n	d6be4 <__udivmoddi4+0x2d4>
   d6b90:	b365      	cbz	r5, d6bec <__udivmoddi4+0x2dc>
   d6b92:	ebba 0304 	subs.w	r3, sl, r4
   d6b96:	eb67 0706 	sbc.w	r7, r7, r6
   d6b9a:	fa07 fe0e 	lsl.w	lr, r7, lr
   d6b9e:	40cb      	lsrs	r3, r1
   d6ba0:	40cf      	lsrs	r7, r1
   d6ba2:	ea4e 0303 	orr.w	r3, lr, r3
   d6ba6:	e885 0088 	stmia.w	r5, {r3, r7}
   d6baa:	2100      	movs	r1, #0
   d6bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6bb0:	4613      	mov	r3, r2
   d6bb2:	e6f8      	b.n	d69a6 <__udivmoddi4+0x96>
   d6bb4:	4610      	mov	r0, r2
   d6bb6:	e6e0      	b.n	d697a <__udivmoddi4+0x6a>
   d6bb8:	ebb8 0402 	subs.w	r4, r8, r2
   d6bbc:	eb69 0603 	sbc.w	r6, r9, r3
   d6bc0:	3801      	subs	r0, #1
   d6bc2:	e7e5      	b.n	d6b90 <__udivmoddi4+0x280>
   d6bc4:	4604      	mov	r4, r0
   d6bc6:	e7d8      	b.n	d6b7a <__udivmoddi4+0x26a>
   d6bc8:	4611      	mov	r1, r2
   d6bca:	e795      	b.n	d6af8 <__udivmoddi4+0x1e8>
   d6bcc:	4681      	mov	r9, r0
   d6bce:	e7c0      	b.n	d6b52 <__udivmoddi4+0x242>
   d6bd0:	468a      	mov	sl, r1
   d6bd2:	e77c      	b.n	d6ace <__udivmoddi4+0x1be>
   d6bd4:	3b02      	subs	r3, #2
   d6bd6:	443c      	add	r4, r7
   d6bd8:	e748      	b.n	d6a6c <__udivmoddi4+0x15c>
   d6bda:	4608      	mov	r0, r1
   d6bdc:	e70a      	b.n	d69f4 <__udivmoddi4+0xe4>
   d6bde:	3802      	subs	r0, #2
   d6be0:	443e      	add	r6, r7
   d6be2:	e72f      	b.n	d6a44 <__udivmoddi4+0x134>
   d6be4:	45c2      	cmp	sl, r8
   d6be6:	d3e7      	bcc.n	d6bb8 <__udivmoddi4+0x2a8>
   d6be8:	463e      	mov	r6, r7
   d6bea:	e7d1      	b.n	d6b90 <__udivmoddi4+0x280>
   d6bec:	4629      	mov	r1, r5
   d6bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6bf2:	bf00      	nop

000d6bf4 <__aeabi_idiv0>:
   d6bf4:	4770      	bx	lr
   d6bf6:	bf00      	nop

000d6bf8 <__cxa_atexit>:
   d6bf8:	b510      	push	{r4, lr}
   d6bfa:	4c05      	ldr	r4, [pc, #20]	; (d6c10 <__cxa_atexit+0x18>)
   d6bfc:	4613      	mov	r3, r2
   d6bfe:	b12c      	cbz	r4, d6c0c <__cxa_atexit+0x14>
   d6c00:	460a      	mov	r2, r1
   d6c02:	4601      	mov	r1, r0
   d6c04:	2002      	movs	r0, #2
   d6c06:	f3af 8000 	nop.w
   d6c0a:	bd10      	pop	{r4, pc}
   d6c0c:	4620      	mov	r0, r4
   d6c0e:	bd10      	pop	{r4, pc}
   d6c10:	00000000 	.word	0x00000000

000d6c14 <memcpy>:
   d6c14:	b510      	push	{r4, lr}
   d6c16:	1e43      	subs	r3, r0, #1
   d6c18:	440a      	add	r2, r1
   d6c1a:	4291      	cmp	r1, r2
   d6c1c:	d004      	beq.n	d6c28 <memcpy+0x14>
   d6c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6c22:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6c26:	e7f8      	b.n	d6c1a <memcpy+0x6>
   d6c28:	bd10      	pop	{r4, pc}

000d6c2a <memset>:
   d6c2a:	4402      	add	r2, r0
   d6c2c:	4603      	mov	r3, r0
   d6c2e:	4293      	cmp	r3, r2
   d6c30:	d002      	beq.n	d6c38 <memset+0xe>
   d6c32:	f803 1b01 	strb.w	r1, [r3], #1
   d6c36:	e7fa      	b.n	d6c2e <memset+0x4>
   d6c38:	4770      	bx	lr
	...

000d6c3c <srand>:
   d6c3c:	b538      	push	{r3, r4, r5, lr}
   d6c3e:	4b12      	ldr	r3, [pc, #72]	; (d6c88 <srand+0x4c>)
   d6c40:	681c      	ldr	r4, [r3, #0]
   d6c42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6c44:	4605      	mov	r5, r0
   d6c46:	b9d3      	cbnz	r3, d6c7e <srand+0x42>
   d6c48:	2018      	movs	r0, #24
   d6c4a:	f7fd fdff 	bl	d484c <malloc>
   d6c4e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6c52:	63a0      	str	r0, [r4, #56]	; 0x38
   d6c54:	8003      	strh	r3, [r0, #0]
   d6c56:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6c5a:	8043      	strh	r3, [r0, #2]
   d6c5c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6c60:	8083      	strh	r3, [r0, #4]
   d6c62:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6c66:	80c3      	strh	r3, [r0, #6]
   d6c68:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6c6c:	8103      	strh	r3, [r0, #8]
   d6c6e:	2305      	movs	r3, #5
   d6c70:	8143      	strh	r3, [r0, #10]
   d6c72:	230b      	movs	r3, #11
   d6c74:	8183      	strh	r3, [r0, #12]
   d6c76:	2201      	movs	r2, #1
   d6c78:	2300      	movs	r3, #0
   d6c7a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6c7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6c80:	2200      	movs	r2, #0
   d6c82:	611d      	str	r5, [r3, #16]
   d6c84:	615a      	str	r2, [r3, #20]
   d6c86:	bd38      	pop	{r3, r4, r5, pc}
   d6c88:	2003e38c 	.word	0x2003e38c

000d6c8c <strcpy>:
   d6c8c:	4603      	mov	r3, r0
   d6c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6c92:	f803 2b01 	strb.w	r2, [r3], #1
   d6c96:	2a00      	cmp	r2, #0
   d6c98:	d1f9      	bne.n	d6c8e <strcpy+0x2>
   d6c9a:	4770      	bx	lr

000d6c9c <strdup>:
   d6c9c:	4b02      	ldr	r3, [pc, #8]	; (d6ca8 <strdup+0xc>)
   d6c9e:	4601      	mov	r1, r0
   d6ca0:	6818      	ldr	r0, [r3, #0]
   d6ca2:	f000 b803 	b.w	d6cac <_strdup_r>
   d6ca6:	bf00      	nop
   d6ca8:	2003e38c 	.word	0x2003e38c

000d6cac <_strdup_r>:
   d6cac:	b570      	push	{r4, r5, r6, lr}
   d6cae:	4606      	mov	r6, r0
   d6cb0:	4608      	mov	r0, r1
   d6cb2:	460c      	mov	r4, r1
   d6cb4:	f000 f80d 	bl	d6cd2 <strlen>
   d6cb8:	1c45      	adds	r5, r0, #1
   d6cba:	4629      	mov	r1, r5
   d6cbc:	4630      	mov	r0, r6
   d6cbe:	f7fd fde5 	bl	d488c <_malloc_r>
   d6cc2:	4606      	mov	r6, r0
   d6cc4:	b118      	cbz	r0, d6cce <_strdup_r+0x22>
   d6cc6:	462a      	mov	r2, r5
   d6cc8:	4621      	mov	r1, r4
   d6cca:	f7ff ffa3 	bl	d6c14 <memcpy>
   d6cce:	4630      	mov	r0, r6
   d6cd0:	bd70      	pop	{r4, r5, r6, pc}

000d6cd2 <strlen>:
   d6cd2:	4603      	mov	r3, r0
   d6cd4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6cd8:	2a00      	cmp	r2, #0
   d6cda:	d1fb      	bne.n	d6cd4 <strlen+0x2>
   d6cdc:	1a18      	subs	r0, r3, r0
   d6cde:	3801      	subs	r0, #1
   d6ce0:	4770      	bx	lr

000d6ce2 <link_code_end>:
	...

000d6ce4 <dynalib_user>:
   d6ce4:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6cf4:	0000 0000 227b 6574 706d 7265 7461 7275     ....{"temperatur
   d6d04:	2265 003a 202c 6822 6d75 6469 7469 2279     e":., "humidity"
   d6d14:	003a 007d 6574 706d 7265 7461 7275 0065     :.}.temperature.

000d6d24 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6d2c:	4949 000d 494f 000d 49a5 000d 495d 000d     II..OI...I..]I..
   d6d3c:	494b 000d                                   KI..

000d6d40 <_ZTVN5spark13EthernetClassE>:
	...
   d6d48:	4f5f 000d 4f55 000d 4f4b 000d 4f41 000d     _O..UO..KO..AO..
   d6d58:	4f35 000d 4f29 000d 4f1d 000d 4f15 000d     5O..)O...O...O..
   d6d68:	4f0b 000d 4f01 000d 52e1 000d               .O...O...R..

000d6d74 <_ZTV7TwoWire>:
	...
   d6d7c:	4f7d 000d 4fc7 000d 4f9f 000d 4f7f 000d     }O...O...O...O..
   d6d8c:	4fa7 000d 4faf 000d 4fb7 000d 4fbf 000d     .O...O...O...O..

000d6d9c <_ZTV9IPAddress>:
	...
   d6da4:	5019 000d 5009 000d 500b 000d 6162 6475     .P...P...P..baud
   d6db4:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d6dc4:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d6dd4:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d6de4:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d6df4:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d6e04:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d6e14:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d6e24:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d6e34:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d6e44:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d6e54:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d6e64:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d6e74:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d6e84:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d6e94 <_ZTVN5spark9MeshClassE>:
	...
   d6e9c:	515b 000d 5151 000d 5147 000d 513d 000d     [Q..QQ..GQ..=Q..
   d6eac:	5131 000d 5125 000d 5119 000d 5111 000d     1Q..%Q...Q...Q..
   d6ebc:	5107 000d 50fd 000d 52e1 000d               .Q...P...R..

000d6ec8 <_ZTVN5spark12NetworkClassE>:
	...
   d6ed0:	5279 000d 5283 000d 528d 000d 5297 000d     yR...R...R...R..
   d6ee0:	52a1 000d 52ad 000d 52b9 000d 52c5 000d     .R...R...R...R..
   d6ef0:	52cd 000d 52d7 000d 52e1 000d 005a 2b25     .R...R...R..Z.%+
   d6f00:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   d6f10:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   d6f20:	6974 656d 0000 0000                         time....

000d6f28 <_ZTV11USARTSerial>:
	...
   d6f30:	57b9 000d 5809 000d 5817 000d 53c1 000d     .W...X...X...S..
   d6f40:	57cd 000d 57ef 000d 57db 000d 5803 000d     .W...W...W...X..
   d6f50:	57bb 000d 57bf 000d                         .W...W..

000d6f58 <_ZTV9USBSerial>:
	...
   d6f60:	58c1 000d 5911 000d 591f 000d 53c1 000d     .X...Y...Y...S..
   d6f70:	58fd 000d 58c3 000d 58d9 000d 590b 000d     .X...X...X...Y..
   d6f80:	58ef 000d 58bd 000d                         .X...X..

000d6f88 <_ZTVN5spark9WiFiClassE>:
	...
   d6f90:	5a2b 000d 5a21 000d 5a17 000d 59cd 000d     +Z..!Z...Z...Y..
   d6fa0:	5a0b 000d 59ff 000d 59f3 000d 59eb 000d     .Z...Y...Y...Y..
   d6fb0:	59e1 000d 59d7 000d 52e1 000d               .Y...Y...R..

000d6fbc <_ZSt7nothrow>:
   d6fbc:	0000 0000                                   ....

000d6fc0 <__sf_fake_stdin>:
	...

000d6fe0 <__sf_fake_stdout>:
	...

000d7000 <__sf_fake_stderr>:
	...
   d7020:	0043                                        C.

000d7022 <link_const_variable_data_end>:
	...

000d7024 <link_constructors_location>:
   d7024:	000d41a9 	.word	0x000d41a9
   d7028:	000d4485 	.word	0x000d4485
   d702c:	000d4921 	.word	0x000d4921
   d7030:	000d4f69 	.word	0x000d4f69
   d7034:	000d50ed 	.word	0x000d50ed
   d7038:	000d5229 	.word	0x000d5229
   d703c:	000d53ad 	.word	0x000d53ad
   d7040:	000d5461 	.word	0x000d5461
   d7044:	000d5771 	.word	0x000d5771
   d7048:	000d57a5 	.word	0x000d57a5
   d704c:	000d5a35 	.word	0x000d5a35
   d7050:	000d5d25 	.word	0x000d5d25
   d7054:	000d5de9 	.word	0x000d5de9
   d7058:	000d5e6d 	.word	0x000d5e6d
   d705c:	000d5ef1 	.word	0x000d5ef1
